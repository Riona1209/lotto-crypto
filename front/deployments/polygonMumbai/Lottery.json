{
  "address": "0x924B3b019e2CE8a72bC6Bd4Ae2DC12F38B4dc081",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint64",
          "name": "_subscriptionId",
          "type": "uint64"
        },
        {
          "internalType": "address",
          "name": "_cordinatorAddress",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "_keyHash",
          "type": "bytes32"
        },
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "_ticketPrice",
          "type": "uint256"
        },
        {
          "internalType": "uint32",
          "name": "_minTicket",
          "type": "uint32"
        },
        {
          "internalType": "uint256",
          "name": "_fee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_configFinishTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_configTimeToClaim",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "have",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "want",
          "type": "address"
        }
      ],
      "name": "OnlyCoordinatorCanFulfill",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "OwnableInvalidOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "OwnableUnauthorizedAccount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ReentrancyGuardReentrantCall",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "ticketPrize",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "minTicket",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "configFinishTime",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "configTimeToClaim",
          "type": "uint256"
        }
      ],
      "name": "ChangedProperties",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "winner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "lotteryIndex",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "totalPrize",
          "type": "uint256"
        }
      ],
      "name": "ClaimedExpiredPrize",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "winner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "lotteryIndex",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "totalPrize",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        }
      ],
      "name": "ClaimedPrize",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "totalValue",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "ticketAmount",
          "type": "uint256"
        }
      ],
      "name": "LotteryFinalized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "ticketNumber",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "minTickets",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "balance",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "finishTime",
          "type": "uint256"
        }
      ],
      "name": "MinTicketsReached",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "randomWords",
          "type": "uint256[]"
        }
      ],
      "name": "RequestFulfilled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "numWords",
          "type": "uint32"
        }
      ],
      "name": "RequestSent",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "buyer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "ticketNumber",
          "type": "uint256"
        }
      ],
      "name": "TicketBought",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "buyTicket",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "checkUpkeep",
      "outputs": [
        {
          "internalType": "bool",
          "name": "upkeepNeeded",
          "type": "bool"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "lotteryIndex",
          "type": "uint256"
        }
      ],
      "name": "claim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "lotteryIndex",
          "type": "uint256"
        }
      ],
      "name": "claimExpiredLottery",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "configFinishTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "configTimeToClaim",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_lotteryId",
          "type": "uint256"
        }
      ],
      "name": "getLotteryStatus",
      "outputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "ticketPrice",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "ticketsCount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "startedTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "balance",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "finalized",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "indexChainLink",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "winner",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "claimed",
              "type": "bool"
            },
            {
              "internalType": "uint32",
              "name": "minTicket",
              "type": "uint32"
            },
            {
              "internalType": "bool",
              "name": "finishTrigger",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "timeToFinish",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "timeToClaim",
              "type": "uint256"
            }
          ],
          "internalType": "struct Lottery.LotteryStruct",
          "name": "_lottery",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_requestId",
          "type": "uint256"
        }
      ],
      "name": "getRequestStatus",
      "outputs": [
        {
          "internalType": "bool",
          "name": "fulfilled",
          "type": "bool"
        },
        {
          "internalType": "uint256[]",
          "name": "randomWords",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_lotteryId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "getUserStatus",
      "outputs": [
        {
          "components": [
            {
              "internalType": "bool",
              "name": "hasTicket",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "claimed",
              "type": "bool"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "ticketId",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "timestamp",
                  "type": "uint256"
                }
              ],
              "internalType": "struct Lottery.Ticket[]",
              "name": "tickets",
              "type": "tuple[]"
            }
          ],
          "internalType": "struct Lottery.User",
          "name": "_returnedUser",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastRequestId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lotteryId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lotteryName",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minTicket",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "performUpkeep",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "randomWords",
          "type": "uint256[]"
        }
      ],
      "name": "rawFulfillRandomWords",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "requestIds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "s_requests",
      "outputs": [
        {
          "internalType": "bool",
          "name": "fulfilled",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "exists",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_callBackGasLimit",
          "type": "uint32"
        }
      ],
      "name": "setCallBackGasLimit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_keyHash",
          "type": "bytes32"
        }
      ],
      "name": "setKeyHashValue",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "_ticketPrice",
          "type": "uint256"
        },
        {
          "internalType": "uint32",
          "name": "_minTicket",
          "type": "uint32"
        },
        {
          "internalType": "uint256",
          "name": "_configFinishTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_configTimeToClaim",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_fee",
          "type": "uint256"
        }
      ],
      "name": "setProperties",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_requestConfirmations",
          "type": "uint16"
        }
      ],
      "name": "setRequestConfirmations",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "_s_subscriptionId",
          "type": "uint64"
        }
      ],
      "name": "setSubscriptionId",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ticketPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x3ad3949283abd6c7bb4bfd0e6811205f9ccb4ce9dcb5f74f86f674f30b242085",
  "receipt": {
    "to": null,
    "from": "0x6A60495E3c5345D8Bbf1CE04B20B93edE0d7d84C",
    "contractAddress": "0x924B3b019e2CE8a72bC6Bd4Ae2DC12F38B4dc081",
    "transactionIndex": 5,
    "gasUsed": "4135479",
    "logsBloom": "0x
    "blockHash": "0x08697a17675b73ea81028b4f1adaa0c102074ae5e14f22844d25b6cb47a3063a",
    "transactionHash": "0x3ad3949283abd6c7bb4bfd0e6811205f9ccb4ce9dcb5f74f86f674f30b242085",
    "logs": [
      {
        "transactionIndex": 5,
        "blockNumber": 44517904,
        "transactionHash": "0x3ad3949283abd6c7bb4bfd0e6811205f9ccb4ce9dcb5f74f86f674f30b242085",
        "address": "0x924B3b019e2CE8a72bC6Bd4Ae2DC12F38B4dc081",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000006a60495e3c5345d8bbf1ce04b20b93ede0d7d84c"
        ],
        "data": "0x",
        "logIndex": 24,
        "blockHash": "0x08697a17675b73ea81028b4f1adaa0c102074ae5e14f22844d25b6cb47a3063a"
      },
      {
        "transactionIndex": 5,
        "blockNumber": 44517904,
        "transactionHash": "0x3ad3949283abd6c7bb4bfd0e6811205f9ccb4ce9dcb5f74f86f674f30b242085",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x0000000000000000000000006a60495e3c5345d8bbf1ce04b20b93ede0d7d84c",
          "0x000000000000000000000000cfef2a3dc244ef7d0fb93c45e762d671445c4569"
        ],
        "data": "0x000000000000000000000000000000000000000000000000002159ea57ed2d100000000000000000000000000000000000000000000000000362004528f2290500000000000000000000000000000000000000000000012e2512a138504eab450000000000000000000000000000000000000000000000000340a65ad104fbf500000000000000000000000000000000000000000000012e2533fb22a83bd855",
        "logIndex": 25,
        "blockHash": "0x08697a17675b73ea81028b4f1adaa0c102074ae5e14f22844d25b6cb47a3063a"
      }
    ],
    "blockNumber": 44517904,
    "cumulativeGasUsed": "4624211",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x6A60495E3c5345D8Bbf1CE04B20B93edE0d7d84C",
    "3262",
    "0x7a1BaC17Ccc5b313516C5E16fb24f7659aA5ebed",
    "0x4b09e658ed251bcafeebbc69400383d49f344ace09b9576fe248bb02c003fe9f",
    "Lotto Crypto",
    "10000000000000000",
    "5",
    "10",
    "300",
    "1800"
  ],
  "numDeployments": 1,
  "solcInputHash": "f8c8ed732713b74ba63cb8507dde60ae",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"_subscriptionId\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"_cordinatorAddress\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_keyHash\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_ticketPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"_minTicket\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_configFinishTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_configTimeToClaim\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"have\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"want\",\"type\":\"address\"}],\"name\":\"OnlyCoordinatorCanFulfill\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReentrancyGuardReentrantCall\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ticketPrize\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"minTicket\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"configFinishTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"configTimeToClaim\",\"type\":\"uint256\"}],\"name\":\"ChangedProperties\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lotteryIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalPrize\",\"type\":\"uint256\"}],\"name\":\"ClaimedExpiredPrize\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lotteryIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalPrize\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"ClaimedPrize\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalValue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ticketAmount\",\"type\":\"uint256\"}],\"name\":\"LotteryFinalized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ticketNumber\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"minTickets\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"finishTime\",\"type\":\"uint256\"}],\"name\":\"MinTicketsReached\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"randomWords\",\"type\":\"uint256[]\"}],\"name\":\"RequestFulfilled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"numWords\",\"type\":\"uint32\"}],\"name\":\"RequestSent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ticketNumber\",\"type\":\"uint256\"}],\"name\":\"TicketBought\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"buyTicket\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"checkUpkeep\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"upkeepNeeded\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"lotteryIndex\",\"type\":\"uint256\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"lotteryIndex\",\"type\":\"uint256\"}],\"name\":\"claimExpiredLottery\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"configFinishTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"configTimeToClaim\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_lotteryId\",\"type\":\"uint256\"}],\"name\":\"getLotteryStatus\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"ticketPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ticketsCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startedTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"finalized\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"indexChainLink\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"claimed\",\"type\":\"bool\"},{\"internalType\":\"uint32\",\"name\":\"minTicket\",\"type\":\"uint32\"},{\"internalType\":\"bool\",\"name\":\"finishTrigger\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"timeToFinish\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timeToClaim\",\"type\":\"uint256\"}],\"internalType\":\"struct Lottery.LotteryStruct\",\"name\":\"_lottery\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_requestId\",\"type\":\"uint256\"}],\"name\":\"getRequestStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"fulfilled\",\"type\":\"bool\"},{\"internalType\":\"uint256[]\",\"name\":\"randomWords\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_lotteryId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getUserStatus\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"hasTicket\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"claimed\",\"type\":\"bool\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"ticketId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"internalType\":\"struct Lottery.Ticket[]\",\"name\":\"tickets\",\"type\":\"tuple[]\"}],\"internalType\":\"struct Lottery.User\",\"name\":\"_returnedUser\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastRequestId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lotteryId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lotteryName\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minTicket\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"performUpkeep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"randomWords\",\"type\":\"uint256[]\"}],\"name\":\"rawFulfillRandomWords\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"requestIds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"s_requests\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"fulfilled\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"exists\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_callBackGasLimit\",\"type\":\"uint32\"}],\"name\":\"setCallBackGasLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_keyHash\",\"type\":\"bytes32\"}],\"name\":\"setKeyHashValue\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_ticketPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"_minTicket\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"_configFinishTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_configTimeToClaim\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"setProperties\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_requestConfirmations\",\"type\":\"uint16\"}],\"name\":\"setRequestConfirmations\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_s_subscriptionId\",\"type\":\"uint64\"}],\"name\":\"setSubscriptionId\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ticketPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}],\"ReentrancyGuardReentrantCall()\":[{\"details\":\"Unauthorized reentrant call.\"}]},\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Lottery.sol\":\"Lottery\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/automation/interfaces/AutomationCompatibleInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AutomationCompatibleInterface {\\n  /**\\n   * @notice method that is simulated by the keepers to see if any work actually\\n   * needs to be performed. This method does does not actually need to be\\n   * executable, and since it is only ever simulated it can consume lots of gas.\\n   * @dev To ensure that it is never called, you may want to add the\\n   * cannotExecute modifier from KeeperBase to your implementation of this\\n   * method.\\n   * @param checkData specified in the upkeep registration so it is always the\\n   * same for a registered upkeep. This can easily be broken down into specific\\n   * arguments using `abi.decode`, so multiple upkeeps can be registered on the\\n   * same contract and easily differentiated by the contract.\\n   * @return upkeepNeeded boolean to indicate whether the keeper should call\\n   * performUpkeep or not.\\n   * @return performData bytes that the keeper should call performUpkeep with, if\\n   * upkeep is needed. If you would like to encode data to decode later, try\\n   * `abi.encode`.\\n   */\\n  function checkUpkeep(bytes calldata checkData) external returns (bool upkeepNeeded, bytes memory performData);\\n\\n  /**\\n   * @notice method that is actually executed by the keepers, via the registry.\\n   * The data returned by the checkUpkeep simulation will be passed into\\n   * this method to actually be executed.\\n   * @dev The input to this method should not be trusted, and the caller of the\\n   * method should not even be restricted to any single registry. Anyone should\\n   * be able call it, and the input should be validated, there is no guarantee\\n   * that the data passed in is the performData returned from checkUpkeep. This\\n   * could happen due to malicious keepers, racing keepers, or simply a state\\n   * change while the performUpkeep transaction is waiting for confirmation.\\n   * Always validate the data passed in.\\n   * @param performData is the data which was passed back from the checkData\\n   * simulation. If it is encoded, it can easily be decoded into other types by\\n   * calling `abi.decode`. This data should not be trusted, and should be\\n   * validated against the contract's current state.\\n   */\\n  function performUpkeep(bytes calldata performData) external;\\n}\\n\",\"keccak256\":\"0x67076747c6f66d8d43472a56e72879c350056bff82e069addaf9064922863340\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface VRFCoordinatorV2Interface {\\n  /**\\n   * @notice Get configuration relevant for making requests\\n   * @return minimumRequestConfirmations global min for request confirmations\\n   * @return maxGasLimit global max for request gas limit\\n   * @return s_provingKeyHashes list of registered key hashes\\n   */\\n  function getRequestConfig() external view returns (uint16, uint32, bytes32[] memory);\\n\\n  /**\\n   * @notice Request a set of random words.\\n   * @param keyHash - Corresponds to a particular oracle job which uses\\n   * that key for generating the VRF proof. Different keyHash's have different gas price\\n   * ceilings, so you can select a specific one to bound your maximum per request cost.\\n   * @param subId  - The ID of the VRF subscription. Must be funded\\n   * with the minimum subscription balance required for the selected keyHash.\\n   * @param minimumRequestConfirmations - How many blocks you'd like the\\n   * oracle to wait before responding to the request. See SECURITY CONSIDERATIONS\\n   * for why you may want to request more. The acceptable range is\\n   * [minimumRequestBlockConfirmations, 200].\\n   * @param callbackGasLimit - How much gas you'd like to receive in your\\n   * fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords\\n   * may be slightly less than this amount because of gas used calling the function\\n   * (argument decoding etc.), so you may need to request slightly more than you expect\\n   * to have inside fulfillRandomWords. The acceptable range is\\n   * [0, maxGasLimit]\\n   * @param numWords - The number of uint256 random values you'd like to receive\\n   * in your fulfillRandomWords callback. Note these numbers are expanded in a\\n   * secure way by the VRFCoordinator from a single random value supplied by the oracle.\\n   * @return requestId - A unique identifier of the request. Can be used to match\\n   * a request to a response in fulfillRandomWords.\\n   */\\n  function requestRandomWords(\\n    bytes32 keyHash,\\n    uint64 subId,\\n    uint16 minimumRequestConfirmations,\\n    uint32 callbackGasLimit,\\n    uint32 numWords\\n  ) external returns (uint256 requestId);\\n\\n  /**\\n   * @notice Create a VRF subscription.\\n   * @return subId - A unique subscription id.\\n   * @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\\n   * @dev Note to fund the subscription, use transferAndCall. For example\\n   * @dev  LINKTOKEN.transferAndCall(\\n   * @dev    address(COORDINATOR),\\n   * @dev    amount,\\n   * @dev    abi.encode(subId));\\n   */\\n  function createSubscription() external returns (uint64 subId);\\n\\n  /**\\n   * @notice Get a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @return balance - LINK balance of the subscription in juels.\\n   * @return reqCount - number of requests for this subscription, determines fee tier.\\n   * @return owner - owner of the subscription.\\n   * @return consumers - list of consumer address which are able to use this subscription.\\n   */\\n  function getSubscription(\\n    uint64 subId\\n  ) external view returns (uint96 balance, uint64 reqCount, address owner, address[] memory consumers);\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @param newOwner - proposed new owner of the subscription\\n   */\\n  function requestSubscriptionOwnerTransfer(uint64 subId, address newOwner) external;\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @dev will revert if original owner of subId has\\n   * not requested that msg.sender become the new owner.\\n   */\\n  function acceptSubscriptionOwnerTransfer(uint64 subId) external;\\n\\n  /**\\n   * @notice Add a consumer to a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - New consumer which can use the subscription\\n   */\\n  function addConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Remove a consumer from a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - Consumer to remove from the subscription\\n   */\\n  function removeConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Cancel a subscription\\n   * @param subId - ID of the subscription\\n   * @param to - Where to send the remaining LINK to\\n   */\\n  function cancelSubscription(uint64 subId, address to) external;\\n\\n  /*\\n   * @notice Check to see if there exists a request commitment consumers\\n   * for all consumers and keyhashes for a given sub.\\n   * @param subId - ID of the subscription\\n   * @return true if there exists at least one unfulfilled request for the subscription, false\\n   * otherwise.\\n   */\\n  function pendingRequestExists(uint64 subId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa9f8b7e09811f4ac9f421116b5d6bcf50b5748025c0cb012aaf5ff7c39a6b46a\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/vrf/VRFConsumerBaseV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/** ****************************************************************************\\n * @notice Interface for contracts using VRF randomness\\n * *****************************************************************************\\n * @dev PURPOSE\\n *\\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\\n * @dev making his output up to suit himself. Reggie provides Vera a public key\\n * @dev to which he knows the secret key. Each time Vera provides a seed to\\n * @dev Reggie, he gives back a value which is computed completely\\n * @dev deterministically from the seed and the secret key.\\n *\\n * @dev Reggie provides a proof by which Vera can verify that the output was\\n * @dev correctly computed once Reggie tells it to her, but without that proof,\\n * @dev the output is indistinguishable to her from a uniform random sample\\n * @dev from the output space.\\n *\\n * @dev The purpose of this contract is to make it easy for unrelated contracts\\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\\n * @dev simple access to a verifiable source of randomness. It ensures 2 things:\\n * @dev 1. The fulfillment came from the VRFCoordinator\\n * @dev 2. The consumer contract implements fulfillRandomWords.\\n * *****************************************************************************\\n * @dev USAGE\\n *\\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\\n * @dev initialize VRFConsumerBase's attributes in their constructor as\\n * @dev shown:\\n *\\n * @dev   contract VRFConsumer {\\n * @dev     constructor(<other arguments>, address _vrfCoordinator, address _link)\\n * @dev       VRFConsumerBase(_vrfCoordinator) public {\\n * @dev         <initialization with other arguments goes here>\\n * @dev       }\\n * @dev   }\\n *\\n * @dev The oracle will have given you an ID for the VRF keypair they have\\n * @dev committed to (let's call it keyHash). Create subscription, fund it\\n * @dev and your consumer contract as a consumer of it (see VRFCoordinatorInterface\\n * @dev subscription management functions).\\n * @dev Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,\\n * @dev callbackGasLimit, numWords),\\n * @dev see (VRFCoordinatorInterface for a description of the arguments).\\n *\\n * @dev Once the VRFCoordinator has received and validated the oracle's response\\n * @dev to your request, it will call your contract's fulfillRandomWords method.\\n *\\n * @dev The randomness argument to fulfillRandomWords is a set of random words\\n * @dev generated from your requestId and the blockHash of the request.\\n *\\n * @dev If your contract could have concurrent requests open, you can use the\\n * @dev requestId returned from requestRandomWords to track which response is associated\\n * @dev with which randomness request.\\n * @dev See \\\"SECURITY CONSIDERATIONS\\\" for principles to keep in mind,\\n * @dev if your contract could have multiple requests in flight simultaneously.\\n *\\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\\n * @dev differ.\\n *\\n * *****************************************************************************\\n * @dev SECURITY CONSIDERATIONS\\n *\\n * @dev A method with the ability to call your fulfillRandomness method directly\\n * @dev could spoof a VRF response with any random value, so it's critical that\\n * @dev it cannot be directly called by anything other than this base contract\\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\\n *\\n * @dev For your users to trust that your contract's random behavior is free\\n * @dev from malicious interference, it's best if you can write it so that all\\n * @dev behaviors implied by a VRF response are executed *during* your\\n * @dev fulfillRandomness method. If your contract must store the response (or\\n * @dev anything derived from it) and use it later, you must ensure that any\\n * @dev user-significant behavior which depends on that stored value cannot be\\n * @dev manipulated by a subsequent VRF request.\\n *\\n * @dev Similarly, both miners and the VRF oracle itself have some influence\\n * @dev over the order in which VRF responses appear on the blockchain, so if\\n * @dev your contract could have multiple VRF requests in flight simultaneously,\\n * @dev you must ensure that the order in which the VRF responses arrive cannot\\n * @dev be used to manipulate your contract's user-significant behavior.\\n *\\n * @dev Since the block hash of the block which contains the requestRandomness\\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\\n * @dev miner could, in principle, fork the blockchain to evict the block\\n * @dev containing the request, forcing the request to be included in a\\n * @dev different block with a different hash, and therefore a different input\\n * @dev to the VRF. However, such an attack would incur a substantial economic\\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\\n * @dev until it calls responds to a request. It is for this reason that\\n * @dev that you can signal to an oracle you'd like them to wait longer before\\n * @dev responding to the request (however this is not enforced in the contract\\n * @dev and so remains effective only in the case of unmodified oracle software).\\n */\\nabstract contract VRFConsumerBaseV2 {\\n  error OnlyCoordinatorCanFulfill(address have, address want);\\n  address private immutable vrfCoordinator;\\n\\n  /**\\n   * @param _vrfCoordinator address of VRFCoordinator contract\\n   */\\n  constructor(address _vrfCoordinator) {\\n    vrfCoordinator = _vrfCoordinator;\\n  }\\n\\n  /**\\n   * @notice fulfillRandomness handles the VRF response. Your contract must\\n   * @notice implement it. See \\\"SECURITY CONSIDERATIONS\\\" above for important\\n   * @notice principles to keep in mind when implementing your fulfillRandomness\\n   * @notice method.\\n   *\\n   * @dev VRFConsumerBaseV2 expects its subcontracts to have a method with this\\n   * @dev signature, and will call it once it has verified the proof\\n   * @dev associated with the randomness. (It is triggered via a call to\\n   * @dev rawFulfillRandomness, below.)\\n   *\\n   * @param requestId The Id initially returned by requestRandomness\\n   * @param randomWords the VRF output expanded to the requested number of words\\n   */\\n  function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords) internal virtual;\\n\\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\\n  // the origin of the call\\n  function rawFulfillRandomWords(uint256 requestId, uint256[] memory randomWords) external {\\n    if (msg.sender != vrfCoordinator) {\\n      revert OnlyCoordinatorCanFulfill(msg.sender, vrfCoordinator);\\n    }\\n    fulfillRandomWords(requestId, randomWords);\\n  }\\n}\\n\",\"keccak256\":\"0x3d709a5e0f1f9b8841172b10ba8af785dd51a13eda9fc395723a706e51329904\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant NOT_ENTERED = 1;\\n    uint256 private constant ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    /**\\n     * @dev Unauthorized reentrant call.\\n     */\\n    error ReentrancyGuardReentrantCall();\\n\\n    constructor() {\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\\n        if (_status == ENTERED) {\\n            revert ReentrancyGuardReentrantCall();\\n        }\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xf980daa263b661ab8ddee7d4fd833c7da7e7995e2c359ff1f17e67e4112f2236\",\"license\":\"MIT\"},\"contracts/Lottery.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.20;\\r\\n\\r\\nimport \\\"@chainlink/contracts/src/v0.8/automation/interfaces/AutomationCompatibleInterface.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\r\\n\\r\\nimport \\\"./VRFV2Consumer.sol\\\";\\r\\n\\r\\ncontract Lottery is\\r\\n    ReentrancyGuard,\\r\\n    VRFV2Consumer,\\r\\n    AutomationCompatibleInterface\\r\\n{\\r\\n\\r\\n    struct Ticket {\\r\\n        uint256 ticketId;\\r\\n        uint256 timestamp;\\r\\n    }\\r\\n\\r\\n    struct User {\\r\\n        bool hasTicket;\\r\\n        bool claimed;\\r\\n        Ticket[] tickets;\\r\\n    }\\r\\n\\r\\n    struct LotteryStruct {\\r\\n        string name;\\r\\n        uint256 ticketPrice;\\r\\n        uint256 ticketsCount;\\r\\n        uint256 startedTime;\\r\\n        uint256 balance;\\r\\n        bool finalized;\\r\\n        uint256 indexChainLink;\\r\\n        address winner;\\r\\n        bool claimed;\\r\\n        uint32 minTicket;\\r\\n        bool finishTrigger;\\r\\n        uint256 timeToFinish;\\r\\n        uint256 timeToClaim;\\r\\n    }\\r\\n\\r\\n    mapping(uint256 => mapping(address => User)) ticketOwners;\\r\\n    mapping(uint256 => mapping(uint256 => address)) tickets;\\r\\n    mapping(uint256 => LotteryStruct) lottery;\\r\\n\\r\\n    uint256 public lotteryId;\\r\\n    uint256 public fee;\\r\\n    uint256 public configFinishTime;\\r\\n    uint256 public configTimeToClaim;\\r\\n    uint32 public minTicket;\\r\\n    uint256 public ticketPrice;\\r\\n    string public lotteryName;\\r\\n\\r\\n    event TicketBought(\\r\\n        address indexed buyer,\\r\\n        uint256 price,\\r\\n        uint256 ticketNumber\\r\\n    );\\r\\n    event MinTicketsReached(\\r\\n        uint256 ticketNumber,\\r\\n        uint32 minTickets,\\r\\n        uint256 balance,\\r\\n        uint256 finishTime\\r\\n    );\\r\\n    event LotteryFinalized(\\r\\n        address owner,\\r\\n        uint256 totalValue,\\r\\n        uint256 ticketAmount\\r\\n    );\\r\\n    event ClaimedPrize(\\r\\n        address indexed winner,\\r\\n        uint256 lotteryIndex,\\r\\n        uint256 totalPrize,\\r\\n        uint256 fee\\r\\n    );\\r\\n    event ClaimedExpiredPrize(\\r\\n        address indexed winner,\\r\\n        address owner,\\r\\n        uint256 lotteryIndex,\\r\\n        uint256 totalPrize\\r\\n    );\\r\\n    event ChangedProperties(\\r\\n        address indexed owner,\\r\\n        string name,\\r\\n        uint256 ticketPrize,\\r\\n        uint256 fee,\\r\\n        uint32 minTicket,\\r\\n        uint256 configFinishTime,\\r\\n        uint256 configTimeToClaim\\r\\n    );\\r\\n\\r\\n    constructor(\\r\\n        address owner,\\r\\n        uint64 _subscriptionId,\\r\\n        address _cordinatorAddress,\\r\\n        bytes32 _keyHash,\\r\\n        string memory _name,\\r\\n        uint256 _ticketPrice,\\r\\n        uint32 _minTicket,\\r\\n        uint256 _fee,\\r\\n        uint256 _configFinishTime,\\r\\n        uint256 _configTimeToClaim\\r\\n    ) VRFV2Consumer(owner, _subscriptionId, _cordinatorAddress, _keyHash) {\\r\\n        // Start with LotteryId=1\\r\\n        lotteryId++;\\r\\n        uint256 currentLottery = lotteryId;\\r\\n\\r\\n        lottery[currentLottery].name = _name;\\r\\n        lottery[currentLottery].ticketPrice = _ticketPrice;\\r\\n        lottery[currentLottery].minTicket = _minTicket;\\r\\n        lottery[currentLottery].startedTime = block.timestamp;\\r\\n\\r\\n        fee = _fee;\\r\\n        lotteryName = _name;\\r\\n        configFinishTime = _configFinishTime;\\r\\n        configTimeToClaim = _configTimeToClaim;\\r\\n        ticketPrice = _ticketPrice;\\r\\n        minTicket = _minTicket;\\r\\n    }\\r\\n\\r\\n    function buyTicket() external payable nonReentrant {\\r\\n        uint256 currentLottery = lotteryId;\\r\\n        require(\\r\\n            !lottery[currentLottery].finalized,\\r\\n            \\\"This lottery has already finalized, wait for results!\\\"\\r\\n        );\\r\\n        require(\\r\\n            lottery[currentLottery].ticketPrice == msg.value,\\r\\n            \\\"You need to pay the exactly ticket price.\\\"\\r\\n        );\\r\\n\\r\\n        uint256 currentLotteryPosition = lottery[currentLottery]\\r\\n            .ticketsCount;\\r\\n        lottery[currentLottery].ticketsCount ++;\\r\\n\\r\\n        ticketOwners[currentLottery][msg.sender].hasTicket = true;\\r\\n        ticketOwners[currentLottery][msg.sender].claimed = false;\\r\\n        ticketOwners[currentLottery][msg.sender].tickets.push(\\r\\n            Ticket(currentLotteryPosition, block.timestamp)\\r\\n        );\\r\\n\\r\\n        tickets[currentLottery][currentLotteryPosition] = msg.sender;\\r\\n        lottery[currentLottery].balance += msg.value;\\r\\n\\r\\n        uint256 nextLotteryPosition = lottery[currentLottery]\\r\\n            .ticketsCount;\\r\\n\\r\\n        if (\\r\\n            !lottery[currentLottery].finishTrigger &&\\r\\n            nextLotteryPosition >= lottery[currentLottery].minTicket\\r\\n        ) {\\r\\n            lottery[currentLottery].finishTrigger = true;\\r\\n            lottery[currentLottery].timeToFinish =\\r\\n                block.timestamp +\\r\\n                configFinishTime;\\r\\n\\r\\n            emit MinTicketsReached(\\r\\n                nextLotteryPosition,\\r\\n                lottery[currentLottery].minTicket,\\r\\n                lottery[currentLottery].balance,\\r\\n                lottery[currentLottery].timeToFinish\\r\\n            );\\r\\n        }\\r\\n\\r\\n        emit TicketBought(msg.sender, msg.value, currentLottery);\\r\\n    }\\r\\n\\r\\n    function finalizeLottery() private {\\r\\n        uint256 currentLottery = lotteryId;\\r\\n        uint256 currentLotteryPosition = lottery[currentLottery]\\r\\n            .ticketsCount;\\r\\n\\r\\n        require(\\r\\n            lottery[currentLottery].minTicket <= currentLotteryPosition,\\r\\n            \\\"It Didnt reach min tickets yet.\\\"\\r\\n        );\\r\\n\\r\\n        require(\\r\\n            !lottery[currentLottery].finalized,\\r\\n            \\\"Lottery already finalized.\\\"\\r\\n        );\\r\\n\\r\\n        lottery[currentLottery].finalized = true;\\r\\n        lottery[currentLottery].indexChainLink = requestRandomWords(1);\\r\\n        emit LotteryFinalized(\\r\\n            msg.sender,\\r\\n            lottery[currentLottery].balance,\\r\\n            lottery[currentLottery].ticketsCount\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function fulfillRandomWords(\\r\\n        uint256 _requestId,\\r\\n        uint256[] memory _randomWords\\r\\n    ) internal override {\\r\\n        super.fulfillRandomWords(_requestId, _randomWords);\\r\\n        uint256 currentLottery = lotteryId;\\r\\n        uint256 currentLotteryPosition = lottery[currentLottery]\\r\\n            .ticketsCount;\\r\\n        if (_requestId == lottery[currentLottery].indexChainLink) {\\r\\n            lottery[currentLottery].winner = tickets[currentLottery][\\r\\n                _randomWords[0] % currentLotteryPosition\\r\\n            ];\\r\\n            lottery[currentLottery].timeToClaim =\\r\\n                block.timestamp +\\r\\n                configTimeToClaim;\\r\\n            require(resetLottery(), \\\"Lottery needs to be reseted\\\");\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function claim(uint256 lotteryIndex) external nonReentrant {\\r\\n        require(\\r\\n            !lottery[lotteryIndex].claimed,\\r\\n            \\\"The winner already claimed its prize.\\\"\\r\\n        );\\r\\n        require(\\r\\n            lottery[lotteryIndex].finalized,\\r\\n            \\\"This lottery isn't finalized yet.\\\"\\r\\n        );\\r\\n        require(\\r\\n            lottery[lotteryIndex].winner != address(0),\\r\\n            \\\"This lottery didn't get a winner yet.\\\"\\r\\n        );\\r\\n        require(\\r\\n            ticketOwners[lotteryIndex][msg.sender].hasTicket,\\r\\n            \\\"You dont have any ticket to claim here.\\\"\\r\\n        );\\r\\n        require(\\r\\n            lottery[lotteryIndex].winner == msg.sender,\\r\\n            \\\"You're not the winner.\\\"\\r\\n        );\\r\\n        require(\\r\\n            !ticketOwners[lotteryIndex][msg.sender].claimed,\\r\\n            \\\"You have alread claimed your prize.\\\"\\r\\n        );\\r\\n        lottery[lotteryIndex].claimed = true;\\r\\n        ticketOwners[lotteryIndex][msg.sender].hasTicket = false;\\r\\n        ticketOwners[lotteryIndex][msg.sender].claimed = true;\\r\\n\\r\\n        uint256 _feeAmount = _calcFee(lottery[lotteryIndex].balance);\\r\\n        uint256 prize = lottery[lotteryIndex].balance - _feeAmount;\\r\\n\\r\\n        payable(owner()).transfer(_feeAmount);\\r\\n        payable(msg.sender).transfer(prize);\\r\\n        emit ClaimedPrize(msg.sender, lotteryIndex, prize, _feeAmount);\\r\\n    }\\r\\n\\r\\n    function claimExpiredLottery(uint256 lotteryIndex) external onlyOwner {\\r\\n        require(\\r\\n            !lottery[lotteryIndex].claimed,\\r\\n            \\\"The winner already claimed its prize.\\\"\\r\\n        );\\r\\n        require(\\r\\n            lottery[lotteryIndex].finalized,\\r\\n            \\\"This lottery isn't finalized yet.\\\"\\r\\n        );\\r\\n        require(\\r\\n            lottery[lotteryIndex].winner != address(0),\\r\\n            \\\"This lottery didn't get a winner yet.\\\"\\r\\n        );\\r\\n        require(\\r\\n            lottery[lotteryIndex].timeToClaim < block.timestamp,\\r\\n            \\\"You can't claim before timeToClaim get expired.\\\"\\r\\n        );\\r\\n\\r\\n        lottery[lotteryIndex].claimed = true;\\r\\n\\r\\n        payable(owner()).transfer(lottery[lotteryIndex].balance);\\r\\n        emit ClaimedExpiredPrize(lottery[lotteryIndex].winner, msg.sender, lotteryIndex, lottery[lotteryIndex].balance);\\r\\n    }\\r\\n\\r\\n    function resetLottery() private returns (bool) {\\r\\n        lotteryId++;\\r\\n\\r\\n        lottery[lotteryId].name = lotteryName;\\r\\n        lottery[lotteryId].ticketPrice = ticketPrice;\\r\\n        lottery[lotteryId].minTicket = minTicket;\\r\\n        lottery[lotteryId].startedTime = block.timestamp;\\r\\n\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function _calcFee(uint256 amount) private view returns (uint256) {\\r\\n        return (amount * fee) / 100;\\r\\n    }\\r\\n\\r\\n    function setProperties(\\r\\n        string memory _name,\\r\\n        uint256 _ticketPrice,\\r\\n        uint32 _minTicket,\\r\\n        uint256 _configFinishTime,\\r\\n        uint256 _configTimeToClaim,\\r\\n        uint256 _fee\\r\\n    ) external onlyOwner {\\r\\n        require(_fee <= 30, \\\"Fee can't be better than 30%\\\");\\r\\n\\r\\n        fee = _fee;\\r\\n        configFinishTime = _configFinishTime;\\r\\n        configTimeToClaim = _configTimeToClaim;\\r\\n        ticketPrice = _ticketPrice;\\r\\n        minTicket = _minTicket;\\r\\n        emit ChangedProperties(\\r\\n            msg.sender,\\r\\n            _name,\\r\\n            _ticketPrice,\\r\\n            _fee,\\r\\n            _minTicket,\\r\\n            _configFinishTime,\\r\\n            _configTimeToClaim\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function getLotteryStatus(\\r\\n        uint256 _lotteryId\\r\\n    ) public view returns (LotteryStruct memory _lottery) {\\r\\n        return lottery[_lotteryId];\\r\\n    }\\r\\n\\r\\n    function getUserStatus(\\r\\n        uint256 _lotteryId,\\r\\n        address _user\\r\\n    ) public view returns (User memory _returnedUser) {\\r\\n        return ticketOwners[_lotteryId][_user];\\r\\n    }\\r\\n\\r\\n    function checkUpkeep(\\r\\n        bytes calldata /* checkData */\\r\\n    )\\r\\n        external\\r\\n        view\\r\\n        override\\r\\n        returns (bool upkeepNeeded, bytes memory /* performData */)\\r\\n    {\\r\\n        uint256 currentLottery = lotteryId;\\r\\n        upkeepNeeded = (lottery[currentLottery].finishTrigger &&\\r\\n            block.timestamp > lottery[currentLottery].timeToFinish);\\r\\n    }\\r\\n\\r\\n    function performUpkeep(bytes calldata /* performData */) external override {\\r\\n        uint256 currentLottery = lotteryId;\\r\\n\\r\\n        require(\\r\\n            (lottery[currentLottery].finishTrigger &&\\r\\n                block.timestamp > lottery[currentLottery].timeToFinish),\\r\\n            \\\"Not read yet\\\"\\r\\n        );\\r\\n        finalizeLottery();\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xd2dcebcdc035517ee89c7ef242095395e3b737ff1f41de12abbda67a911e569e\",\"license\":\"MIT\"},\"contracts/VRFV2Consumer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.20;\\r\\n\\r\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\\\";\\r\\nimport \\\"@chainlink/contracts/src/v0.8/vrf/VRFConsumerBaseV2.sol\\\";\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\n\\r\\ncontract VRFV2Consumer is VRFConsumerBaseV2, Ownable {\\r\\n    event RequestSent(uint256 requestId, uint32 numWords);\\r\\n    event RequestFulfilled(uint256 requestId, uint256[] randomWords);\\r\\n\\r\\n    struct RequestStatus {\\r\\n        bool fulfilled;\\r\\n        bool exists;\\r\\n        uint256[] randomWords;\\r\\n    }\\r\\n\\r\\n    mapping(uint256 => RequestStatus) public s_requests; /* requestId --> requestStatus */\\r\\n    VRFCoordinatorV2Interface COORDINATOR;\\r\\n\\r\\n    // Your subscription ID.\\r\\n    uint64 s_subscriptionId;\\r\\n\\r\\n    // past requests Id.\\r\\n    uint256[] public requestIds;\\r\\n    uint256 public lastRequestId;\\r\\n\\r\\n    // The gas lane to use, which specifies the maximum gas price to bump to.\\r\\n    // For a list of available gas lanes on each network,\\r\\n    // see https://docs.chain.link/docs/vrf/v2/subscription/supported-networks/#configurations\\r\\n    bytes32 keyHash;\\r\\n\\r\\n    // Depends on the number of requested values that you want sent to the\\r\\n    // fulfillRandomWords() function. Storing each word costs about 20,000 gas,\\r\\n    // so 100,000 is a safe default for this example contract. Test and adjust\\r\\n    // this limit based on the network that you select, the size of the request,\\r\\n    // and the processing of the callback request in the fulfillRandomWords()\\r\\n    // function.\\r\\n    uint32 callbackGasLimit;\\r\\n\\r\\n    // The default is 3, but you can set this higher.\\r\\n    uint16 requestConfirmations;\\r\\n\\r\\n    constructor(address owner, uint64 subscriptionId, address cordinatorAddress, bytes32 _keyHash)\\r\\n        Ownable(owner) VRFConsumerBaseV2(cordinatorAddress)\\r\\n    {\\r\\n        COORDINATOR = VRFCoordinatorV2Interface(cordinatorAddress);\\r\\n        s_subscriptionId = subscriptionId;\\r\\n        keyHash = _keyHash;\\r\\n        callbackGasLimit = 500000;\\r\\n        requestConfirmations = 3;\\r\\n    }\\r\\n\\r\\n    // Assumes the subscription is funded sufficiently.\\r\\n    function requestRandomWords(uint32 _numWords) internal returns (uint256 requestId) {\\r\\n        // Will revert if subscription is not set and funded.\\r\\n        requestId = COORDINATOR.requestRandomWords(\\r\\n            keyHash,\\r\\n            s_subscriptionId,\\r\\n            requestConfirmations,\\r\\n            callbackGasLimit,\\r\\n            _numWords\\r\\n        );\\r\\n        s_requests[requestId] = RequestStatus({randomWords: new uint256[](0), exists: true, fulfilled: false});\\r\\n        requestIds.push(requestId);\\r\\n        lastRequestId = requestId;\\r\\n        emit RequestSent(requestId, _numWords);\\r\\n        return requestId;\\r\\n    }\\r\\n\\r\\n    function fulfillRandomWords(uint256 _requestId, uint256[] memory _randomWords) internal virtual override {\\r\\n        require(s_requests[_requestId].exists, 'request not found');\\r\\n        s_requests[_requestId].fulfilled = true;\\r\\n        s_requests[_requestId].randomWords = _randomWords;\\r\\n        emit RequestFulfilled(_requestId, _randomWords);\\r\\n    }\\r\\n\\r\\n    function getRequestStatus(uint256 _requestId) external view returns (bool fulfilled, uint256[] memory randomWords) {\\r\\n        require(s_requests[_requestId].exists, 'request not found');\\r\\n        RequestStatus memory request = s_requests[_requestId];\\r\\n        return (request.fulfilled, request.randomWords);\\r\\n    }\\r\\n\\r\\n    function setKeyHashValue(bytes32 _keyHash) external onlyOwner {\\r\\n        keyHash = _keyHash;\\r\\n    }\\r\\n\\r\\n    function setCallBackGasLimit(uint32 _callBackGasLimit) external onlyOwner {\\r\\n        callbackGasLimit = _callBackGasLimit;\\r\\n    }\\r\\n\\r\\n    function setRequestConfirmations(uint16 _requestConfirmations) external onlyOwner {\\r\\n        requestConfirmations = _requestConfirmations;\\r\\n    }\\r\\n\\r\\n    function setSubscriptionId(uint64 _s_subscriptionId) external onlyOwner {\\r\\n        s_subscriptionId = _s_subscriptionId;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x596c3c2f41fcb673604b1a9b76aa331c1ef57e3fccec9cb55e560e2b7b693fb5\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x60806040526004361061019c5760003560e01c80638ff72293116100ec578063e575df721161008a578063edca914c11610064578063edca914c146105c7578063f2fde38b146105d1578063f6a30e3e146105fa578063fc2a88c3146106255761019c565b8063e575df7214610536578063e580f47b14610573578063ea7b4f771461059e5761019c565b8063a7348e5f116100c6578063a7348e5f1461047b578063c468bf9c146104a4578063d8a4676f146104cd578063ddca3f431461050b5761019c565b80638ff72293146103d7578063982d808414610414578063a168fa891461043d5761019c565b80636e04ff0d116101595780638796ba8c116101335780638796ba8c1461031b5780638824f5a71461035857806389737fcf146103815780638da5cb5b146103ac5761019c565b80636e04ff0d1461029b578063715018a6146102d95780637cbcbd3c146102f05761019c565b80631209b1f6146101a15780631fe543e3146101cc57806323d14149146101f5578063379607f5146102205780634585e33b146102495780635cc2969514610272575b600080fd5b3480156101ad57600080fd5b506101b6610650565b6040516101c39190612725565b60405180910390f35b3480156101d857600080fd5b506101f360048036038101906101ee91906128d9565b610656565b005b34801561020157600080fd5b5061020a610716565b60405161021791906129b4565b60405180910390f35b34801561022c57600080fd5b50610247600480360381019061024291906129d6565b6107a4565b005b34801561025557600080fd5b50610270600480360381019061026b9190612a5e565b610d41565b005b34801561027e57600080fd5b5061029960048036038101906102949190612b9c565b610dd9565b005b3480156102a757600080fd5b506102c260048036038101906102bd9190612a5e565b610ec2565b6040516102d0929190612cb5565b60405180910390f35b3480156102e557600080fd5b506102ee610f1c565b005b3480156102fc57600080fd5b50610305610f30565b6040516103129190612725565b60405180910390f35b34801561032757600080fd5b50610342600480360381019061033d91906129d6565b610f36565b60405161034f9190612725565b60405180910390f35b34801561036457600080fd5b5061037f600480360381019061037a9190612d1f565b610f5a565b005b34801561038d57600080fd5b50610396610f82565b6040516103a39190612725565b60405180910390f35b3480156103b857600080fd5b506103c1610f88565b6040516103ce9190612d8d565b60405180910390f35b3480156103e357600080fd5b506103fe60048036038101906103f991906129d6565b610fb2565b60405161040b9190612f47565b60405180910390f35b34801561042057600080fd5b5061043b60048036038101906104369190612f69565b611185565b005b34801561044957600080fd5b50610464600480360381019061045f91906129d6565b6111b1565b604051610472929190612f96565b60405180910390f35b34801561048757600080fd5b506104a2600480360381019061049d9190612ff5565b6111ef565b005b3480156104b057600080fd5b506104cb60048036038101906104c691906129d6565b611201565b005b3480156104d957600080fd5b506104f460048036038101906104ef91906129d6565b611501565b6040516105029291906130d1565b60405180910390f35b34801561051757600080fd5b5061052061162c565b60405161052d9190612725565b60405180910390f35b34801561054257600080fd5b5061055d6004803603810190610558919061312d565b611632565b60405161056a919061329b565b60405180910390f35b34801561057f57600080fd5b50610588611746565b6040516105959190612725565b60405180910390f35b3480156105aa57600080fd5b506105c560048036038101906105c091906132fd565b61174c565b005b6105cf611780565b005b3480156105dd57600080fd5b506105f860048036038101906105f3919061332a565b611c62565b005b34801561060657600080fd5b5061060f611ce8565b60405161061c9190613366565b60405180910390f35b34801561063157600080fd5b5061063a611cfe565b6040516106479190612725565b60405180910390f35b60105481565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461070857337f00000000000000000000000000000000000000000000000000000000000000006040517f1cf993f40000000000000000000000000000000000000000000000000000000081526004016106ff929190613381565b60405180910390fd5b6107128282611d04565b5050565b60118054610723906133d9565b80601f016020809104026020016040519081016040528092919081815260200182805461074f906133d9565b801561079c5780601f106107715761010080835404028352916020019161079c565b820191906000526020600020905b81548152906001019060200180831161077f57829003601f168201915b505050505081565b6107ac611e82565b600a600082815260200190815260200160002060070160149054906101000a900460ff1615610810576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108079061347c565b60405180910390fd5b600a600082815260200190815260200160002060050160009054906101000a900460ff16610873576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161086a9061350e565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff16600a600083815260200190815260200160002060070160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1603610918576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161090f906135a0565b60405180910390fd5b6008600082815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160009054906101000a900460ff166109b8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109af90613632565b60405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff16600a600083815260200190815260200160002060070160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610a5c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a539061369e565b60405180910390fd5b6008600082815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160019054906101000a900460ff1615610afd576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610af490613730565b60405180910390fd5b6001600a600083815260200190815260200160002060070160146101000a81548160ff02191690831515021790555060006008600083815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160006101000a81548160ff02191690831515021790555060016008600083815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160016101000a81548160ff0219169083151502179055506000610c25600a600084815260200190815260200160002060040154611ec8565b9050600081600a600085815260200190815260200160002060040154610c4b919061377f565b9050610c55610f88565b73ffffffffffffffffffffffffffffffffffffffff166108fc839081150290604051600060405180830381858888f19350505050158015610c9a573d6000803e3d6000fd5b503373ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f19350505050158015610ce1573d6000803e3d6000fd5b503373ffffffffffffffffffffffffffffffffffffffff167f588837c8642bd1b376f9f89a12784072019e42aa3f6412a48ebd1f450a113e18848385604051610d2c939291906137b3565b60405180910390a25050610d3e611eeb565b50565b6000600b549050600a600082815260200190815260200160002060070160199054906101000a900460ff168015610d8d5750600a60008281526020019081526020016000206008015442115b610dcc576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610dc390613836565b60405180910390fd5b610dd4611ef5565b505050565b610de16120a8565b601e811115610e25576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e1c906138a2565b60405180910390fd5b80600c8190555082600d8190555081600e819055508460108190555083600f60006101000a81548163ffffffff021916908363ffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff167fdfcfcdeac7cdd38c4b0a0537d363f95fa8d7cce818fd23989dc2f35f11a90ae3878784888888604051610eb2969594939291906138c2565b60405180910390a2505050505050565b600060606000600b549050600a600082815260200190815260200160002060070160199054906101000a900460ff168015610f125750600a60008281526020019081526020016000206008015442115b9250509250929050565b610f246120a8565b610f2e600061212f565b565b600d5481565b60048181548110610f4657600080fd5b906000526020600020016000915090505481565b610f626120a8565b80600760046101000a81548161ffff021916908361ffff16021790555050565b600e5481565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b610fba6125f3565b600a6000838152602001908152602001600020604051806101a0016040529081600082018054610fe9906133d9565b80601f0160208091040260200160405190810160405280929190818152602001828054611015906133d9565b80156110625780601f1061103757610100808354040283529160200191611062565b820191906000526020600020905b81548152906001019060200180831161104557829003601f168201915b50505050508152602001600182015481526020016002820154815260200160038201548152602001600482015481526020016005820160009054906101000a900460ff16151515158152602001600682015481526020016007820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016007820160149054906101000a900460ff161515151581526020016007820160159054906101000a900463ffffffff1663ffffffff1663ffffffff1681526020016007820160199054906101000a900460ff16151515158152602001600882015481526020016009820154815250509050919050565b61118d6120a8565b80600760006101000a81548163ffffffff021916908363ffffffff16021790555050565b60026020528060005260406000206000915090508060000160009054906101000a900460ff16908060000160019054906101000a900460ff16905082565b6111f76120a8565b8060068190555050565b6112096120a8565b600a600082815260200190815260200160002060070160149054906101000a900460ff161561126d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112649061347c565b60405180910390fd5b600a600082815260200190815260200160002060050160009054906101000a900460ff166112d0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112c79061350e565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff16600a600083815260200190815260200160002060070160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1603611375576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161136c906135a0565b60405180910390fd5b42600a600083815260200190815260200160002060090154106113cd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113c49061399c565b60405180910390fd5b6001600a600083815260200190815260200160002060070160146101000a81548160ff021916908315150217905550611404610f88565b73ffffffffffffffffffffffffffffffffffffffff166108fc600a6000848152602001908152602001600020600401549081150290604051600060405180830381858888f1935050505015801561145f573d6000803e3d6000fd5b50600a600082815260200190815260200160002060070160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f18871ffdb80828adbbab2e9a9ecbe66822633e5b565d86f4fe5cbbd6871f02793383600a6000868152602001908152602001600020600401546040516114f6939291906139bc565b60405180910390a250565b600060606002600084815260200190815260200160002060000160019054906101000a900460ff16611568576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161155f90613a3f565b60405180910390fd5b6000600260008581526020019081526020016000206040518060600160405290816000820160009054906101000a900460ff161515151581526020016000820160019054906101000a900460ff161515151581526020016001820180548060200260200160405190810160405280929190818152602001828054801561160d57602002820191906000526020600020905b8154815260200190600101908083116115f9575b5050505050815250509050806000015181604001519250925050915091565b600c5481565b61163a61267d565b6008600084815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206040518060600160405290816000820160009054906101000a900460ff161515151581526020016000820160019054906101000a900460ff1615151515815260200160018201805480602002602001604051908101604052809291908181526020016000905b82821015611736578382906000526020600020906002020160405180604001604052908160008201548152602001600182015481525050815260200190600101906116f0565b5050505081525050905092915050565b600b5481565b6117546120a8565b80600360146101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790555050565b611788611e82565b6000600b549050600a600082815260200190815260200160002060050160009054906101000a900460ff16156117f3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117ea90613ad1565b60405180910390fd5b34600a6000838152602001908152602001600020600101541461184b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161184290613b63565b60405180910390fd5b6000600a6000838152602001908152602001600020600201549050600a6000838152602001908152602001600020600201600081548092919061188d90613b83565b919050555060016008600084815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160006101000a81548160ff02191690831515021790555060006008600084815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160016101000a81548160ff0219169083151502179055506008600083815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001016040518060400160405280838152602001428152509080600181540180825580915050600190039060005260206000209060020201600090919091909150600082015181600001556020820151816001015550503360096000848152602001908152602001600020600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555034600a60008481526020019081526020016000206004016000828254611a9a9190613bcb565b925050819055506000600a6000848152602001908152602001600020600201549050600a600084815260200190815260200160002060070160199054906101000a900460ff16158015611b195750600a600084815260200190815260200160002060070160159054906101000a900463ffffffff1663ffffffff168110155b15611c05576001600a600085815260200190815260200160002060070160196101000a81548160ff021916908315150217905550600d5442611b5b9190613bcb565b600a6000858152602001908152602001600020600801819055507f3dcdfcde0ffa80946025c1000bff52fe117ec934dfc3c45fc9cfaa064c91c18c81600a600086815260200190815260200160002060070160159054906101000a900463ffffffff16600a600087815260200190815260200160002060040154600a600088815260200190815260200160002060080154604051611bfc9493929190613bff565b60405180910390a15b3373ffffffffffffffffffffffffffffffffffffffff167f97fac0ce6558f4accbb4696915809c0ef7023ffe7ba9454e94d49fb652aae1d53485604051611c4d929190613c44565b60405180910390a2505050611c60611eeb565b565b611c6a6120a8565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603611cdc5760006040517f1e4fbdf7000000000000000000000000000000000000000000000000000000008152600401611cd39190612d8d565b60405180910390fd5b611ce58161212f565b50565b600f60009054906101000a900463ffffffff1681565b60055481565b611d0e82826121f5565b6000600b5490506000600a6000838152602001908152602001600020600201549050600a6000838152602001908152602001600020600601548403611e7c576009600083815260200190815260200160002060008285600081518110611d7757611d76613c6d565b5b6020026020010151611d899190613ccb565b815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600a600084815260200190815260200160002060070160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600e5442611e1a9190613bcb565b600a600084815260200190815260200160002060090181905550611e3c6122ef565b611e7b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e7290613d48565b60405180910390fd5b5b50505050565b600260005403611ebe576040517f3ee5aeb500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6002600081905550565b60006064600c5483611eda9190613d68565b611ee49190613daa565b9050919050565b6001600081905550565b6000600b5490506000600a600083815260200190815260200160002060020154905080600a600084815260200190815260200160002060070160159054906101000a900463ffffffff1663ffffffff161115611f86576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f7d90613e27565b60405180910390fd5b600a600083815260200190815260200160002060050160009054906101000a900460ff1615611fea576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611fe190613e93565b60405180910390fd5b6001600a600084815260200190815260200160002060050160006101000a81548160ff02191690831515021790555061202360016123bc565b600a6000848152602001908152602001600020600601819055507f9337fa876371ba7a2ae0a3fd96612bed9a9baaff955d10f3c0168d544f7a053733600a600085815260200190815260200160002060040154600a60008681526020019081526020016000206002015460405161209c939291906139bc565b60405180910390a15050565b6120b06125eb565b73ffffffffffffffffffffffffffffffffffffffff166120ce610f88565b73ffffffffffffffffffffffffffffffffffffffff161461212d576120f16125eb565b6040517f118cdaa70000000000000000000000000000000000000000000000000000000081526004016121249190612d8d565b60405180910390fd5b565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6002600083815260200190815260200160002060000160019054906101000a900460ff16612258576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161224f90613a3f565b60405180910390fd5b60016002600084815260200190815260200160002060000160006101000a81548160ff021916908315150217905550806002600084815260200190815260200160002060010190805190602001906122b19291906126a2565b507ffe2e2d779dba245964d4e3ef9b994be63856fd568bf7d3ca9e224755cb1bd54d82826040516122e3929190613eb3565b60405180910390a15050565b6000600b600081548092919061230490613b83565b91905055506011600a6000600b548152602001908152602001600020600001908161232f91906140ba565b50601054600a6000600b54815260200190815260200160002060010181905550600f60009054906101000a900463ffffffff16600a6000600b54815260200190815260200160002060070160156101000a81548163ffffffff021916908363ffffffff16021790555042600a6000600b548152602001908152602001600020600301819055506001905090565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16635d3b1d30600654600360149054906101000a900467ffffffffffffffff16600760049054906101000a900461ffff16600760009054906101000a900463ffffffff16876040518663ffffffff1660e01b815260040161245b9594939291906141cf565b6020604051808303816000875af115801561247a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061249e9190614237565b90506040518060600160405280600015158152602001600115158152602001600067ffffffffffffffff8111156124d8576124d7612796565b5b6040519080825280602002602001820160405280156125065781602001602082028036833780820191505090505b508152506002600083815260200190815260200160002060008201518160000160006101000a81548160ff02191690831515021790555060208201518160000160016101000a81548160ff02191690831515021790555060408201518160010190805190602001906125799291906126a2565b509050506004819080600181540180825580915050600190039060005260206000200160009091909190915055806005819055507fcc58b13ad3eab50626c6a6300b1d139cd6ebb1688a7cced9461c2f7e762665ee81836040516125de929190614264565b60405180910390a1919050565b600033905090565b604051806101a00160405280606081526020016000815260200160008152602001600081526020016000815260200160001515815260200160008152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600015158152602001600063ffffffff16815260200160001515815260200160008152602001600081525090565b6040518060600160405280600015158152602001600015158152602001606081525090565b8280548282559060005260206000209081019282156126de579160200282015b828111156126dd5782518255916020019190600101906126c2565b5b5090506126eb91906126ef565b5090565b5b808211156127085760008160009055506001016126f0565b5090565b6000819050919050565b61271f8161270c565b82525050565b600060208201905061273a6000830184612716565b92915050565b6000604051905090565b600080fd5b600080fd5b61275d8161270c565b811461276857600080fd5b50565b60008135905061277a81612754565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6127ce82612785565b810181811067ffffffffffffffff821117156127ed576127ec612796565b5b80604052505050565b6000612800612740565b905061280c82826127c5565b919050565b600067ffffffffffffffff82111561282c5761282b612796565b5b602082029050602081019050919050565b600080fd5b600061285561285084612811565b6127f6565b905080838252602082019050602084028301858111156128785761287761283d565b5b835b818110156128a1578061288d888261276b565b84526020840193505060208101905061287a565b5050509392505050565b600082601f8301126128c0576128bf612780565b5b81356128d0848260208601612842565b91505092915050565b600080604083850312156128f0576128ef61274a565b5b60006128fe8582860161276b565b925050602083013567ffffffffffffffff81111561291f5761291e61274f565b5b61292b858286016128ab565b9150509250929050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561296f578082015181840152602081019050612954565b60008484015250505050565b600061298682612935565b6129908185612940565b93506129a0818560208601612951565b6129a981612785565b840191505092915050565b600060208201905081810360008301526129ce818461297b565b905092915050565b6000602082840312156129ec576129eb61274a565b5b60006129fa8482850161276b565b91505092915050565b600080fd5b60008083601f840112612a1e57612a1d612780565b5b8235905067ffffffffffffffff811115612a3b57612a3a612a03565b5b602083019150836001820283011115612a5757612a5661283d565b5b9250929050565b60008060208385031215612a7557612a7461274a565b5b600083013567ffffffffffffffff811115612a9357612a9261274f565b5b612a9f85828601612a08565b92509250509250929050565b600080fd5b600067ffffffffffffffff821115612acb57612aca612796565b5b612ad482612785565b9050602081019050919050565b82818337600083830152505050565b6000612b03612afe84612ab0565b6127f6565b905082815260208101848484011115612b1f57612b1e612aab565b5b612b2a848285612ae1565b509392505050565b600082601f830112612b4757612b46612780565b5b8135612b57848260208601612af0565b91505092915050565b600063ffffffff82169050919050565b612b7981612b60565b8114612b8457600080fd5b50565b600081359050612b9681612b70565b92915050565b60008060008060008060c08789031215612bb957612bb861274a565b5b600087013567ffffffffffffffff811115612bd757612bd661274f565b5b612be389828a01612b32565b9650506020612bf489828a0161276b565b9550506040612c0589828a01612b87565b9450506060612c1689828a0161276b565b9350506080612c2789828a0161276b565b92505060a0612c3889828a0161276b565b9150509295509295509295565b60008115159050919050565b612c5a81612c45565b82525050565b600081519050919050565b600082825260208201905092915050565b6000612c8782612c60565b612c918185612c6b565b9350612ca1818560208601612951565b612caa81612785565b840191505092915050565b6000604082019050612cca6000830185612c51565b8181036020830152612cdc8184612c7c565b90509392505050565b600061ffff82169050919050565b612cfc81612ce5565b8114612d0757600080fd5b50565b600081359050612d1981612cf3565b92915050565b600060208284031215612d3557612d3461274a565b5b6000612d4384828501612d0a565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000612d7782612d4c565b9050919050565b612d8781612d6c565b82525050565b6000602082019050612da26000830184612d7e565b92915050565b600082825260208201905092915050565b6000612dc482612935565b612dce8185612da8565b9350612dde818560208601612951565b612de781612785565b840191505092915050565b612dfb8161270c565b82525050565b612e0a81612c45565b82525050565b612e1981612d6c565b82525050565b612e2881612b60565b82525050565b60006101a0830160008301518482036000860152612e4c8282612db9565b9150506020830151612e616020860182612df2565b506040830151612e746040860182612df2565b506060830151612e876060860182612df2565b506080830151612e9a6080860182612df2565b5060a0830151612ead60a0860182612e01565b5060c0830151612ec060c0860182612df2565b5060e0830151612ed360e0860182612e10565b50610100830151612ee8610100860182612e01565b50610120830151612efd610120860182612e1f565b50610140830151612f12610140860182612e01565b50610160830151612f27610160860182612df2565b50610180830151612f3c610180860182612df2565b508091505092915050565b60006020820190508181036000830152612f618184612e2e565b905092915050565b600060208284031215612f7f57612f7e61274a565b5b6000612f8d84828501612b87565b91505092915050565b6000604082019050612fab6000830185612c51565b612fb86020830184612c51565b9392505050565b6000819050919050565b612fd281612fbf565b8114612fdd57600080fd5b50565b600081359050612fef81612fc9565b92915050565b60006020828403121561300b5761300a61274a565b5b600061301984828501612fe0565b91505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b600061305a8383612df2565b60208301905092915050565b6000602082019050919050565b600061307e82613022565b613088818561302d565b93506130938361303e565b8060005b838110156130c45781516130ab888261304e565b97506130b683613066565b925050600181019050613097565b5085935050505092915050565b60006040820190506130e66000830185612c51565b81810360208301526130f88184613073565b90509392505050565b61310a81612d6c565b811461311557600080fd5b50565b60008135905061312781613101565b92915050565b600080604083850312156131445761314361274a565b5b60006131528582860161276b565b925050602061316385828601613118565b9150509250929050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6040820160008201516131af6000850182612df2565b5060208201516131c26020850182612df2565b50505050565b60006131d48383613199565b60408301905092915050565b6000602082019050919050565b60006131f88261316d565b6132028185613178565b935061320d83613189565b8060005b8381101561323e57815161322588826131c8565b9750613230836131e0565b925050600181019050613211565b5085935050505092915050565b60006060830160008301516132636000860182612e01565b5060208301516132766020860182612e01565b506040830151848203604086015261328e82826131ed565b9150508091505092915050565b600060208201905081810360008301526132b5818461324b565b905092915050565b600067ffffffffffffffff82169050919050565b6132da816132bd565b81146132e557600080fd5b50565b6000813590506132f7816132d1565b92915050565b6000602082840312156133135761331261274a565b5b6000613321848285016132e8565b91505092915050565b6000602082840312156133405761333f61274a565b5b600061334e84828501613118565b91505092915050565b61336081612b60565b82525050565b600060208201905061337b6000830184613357565b92915050565b60006040820190506133966000830185612d7e565b6133a36020830184612d7e565b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806133f157607f821691505b602082108103613404576134036133aa565b5b50919050565b7f5468652077696e6e657220616c726561647920636c61696d656420697473207060008201527f72697a652e000000000000000000000000000000000000000000000000000000602082015250565b6000613466602583612940565b91506134718261340a565b604082019050919050565b6000602082019050818103600083015261349581613459565b9050919050565b7f54686973206c6f74746572792069736e27742066696e616c697a65642079657460008201527f2e00000000000000000000000000000000000000000000000000000000000000602082015250565b60006134f8602183612940565b91506135038261349c565b604082019050919050565b60006020820190508181036000830152613527816134eb565b9050919050565b7f54686973206c6f7474657279206469646e27742067657420612077696e6e657260008201527f207965742e000000000000000000000000000000000000000000000000000000602082015250565b600061358a602583612940565b91506135958261352e565b604082019050919050565b600060208201905081810360008301526135b98161357d565b9050919050565b7f596f7520646f6e74206861766520616e79207469636b657420746f20636c616960008201527f6d20686572652e00000000000000000000000000000000000000000000000000602082015250565b600061361c602783612940565b9150613627826135c0565b604082019050919050565b6000602082019050818103600083015261364b8161360f565b9050919050565b7f596f75277265206e6f74207468652077696e6e65722e00000000000000000000600082015250565b6000613688601683612940565b915061369382613652565b602082019050919050565b600060208201905081810360008301526136b78161367b565b9050919050565b7f596f75206861766520616c7265616420636c61696d656420796f75722070726960008201527f7a652e0000000000000000000000000000000000000000000000000000000000602082015250565b600061371a602383612940565b9150613725826136be565b604082019050919050565b600060208201905081810360008301526137498161370d565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061378a8261270c565b91506137958361270c565b92508282039050818111156137ad576137ac613750565b5b92915050565b60006060820190506137c86000830186612716565b6137d56020830185612716565b6137e26040830184612716565b949350505050565b7f4e6f742072656164207965740000000000000000000000000000000000000000600082015250565b6000613820600c83612940565b915061382b826137ea565b602082019050919050565b6000602082019050818103600083015261384f81613813565b9050919050565b7f4665652063616e277420626520626574746572207468616e2033302500000000600082015250565b600061388c601c83612940565b915061389782613856565b602082019050919050565b600060208201905081810360008301526138bb8161387f565b9050919050565b600060c08201905081810360008301526138dc818961297b565b90506138eb6020830188612716565b6138f86040830187612716565b6139056060830186613357565b6139126080830185612716565b61391f60a0830184612716565b979650505050505050565b7f596f752063616e277420636c61696d206265666f72652074696d65546f436c6160008201527f696d2067657420657870697265642e0000000000000000000000000000000000602082015250565b6000613986602f83612940565b91506139918261392a565b604082019050919050565b600060208201905081810360008301526139b581613979565b9050919050565b60006060820190506139d16000830186612d7e565b6139de6020830185612716565b6139eb6040830184612716565b949350505050565b7f72657175657374206e6f7420666f756e64000000000000000000000000000000600082015250565b6000613a29601183612940565b9150613a34826139f3565b602082019050919050565b60006020820190508181036000830152613a5881613a1c565b9050919050565b7f54686973206c6f74746572792068617320616c72656164792066696e616c697a60008201527f65642c207761697420666f7220726573756c7473210000000000000000000000602082015250565b6000613abb603583612940565b9150613ac682613a5f565b604082019050919050565b60006020820190508181036000830152613aea81613aae565b9050919050565b7f596f75206e65656420746f20706179207468652065786163746c79207469636b60008201527f65742070726963652e0000000000000000000000000000000000000000000000602082015250565b6000613b4d602983612940565b9150613b5882613af1565b604082019050919050565b60006020820190508181036000830152613b7c81613b40565b9050919050565b6000613b8e8261270c565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203613bc057613bbf613750565b5b600182019050919050565b6000613bd68261270c565b9150613be18361270c565b9250828201905080821115613bf957613bf8613750565b5b92915050565b6000608082019050613c146000830187612716565b613c216020830186613357565b613c2e6040830185612716565b613c3b6060830184612716565b95945050505050565b6000604082019050613c596000830185612716565b613c666020830184612716565b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000613cd68261270c565b9150613ce18361270c565b925082613cf157613cf0613c9c565b5b828206905092915050565b7f4c6f7474657279206e6565647320746f20626520726573657465640000000000600082015250565b6000613d32601b83612940565b9150613d3d82613cfc565b602082019050919050565b60006020820190508181036000830152613d6181613d25565b9050919050565b6000613d738261270c565b9150613d7e8361270c565b9250828202613d8c8161270c565b91508282048414831517613da357613da2613750565b5b5092915050565b6000613db58261270c565b9150613dc08361270c565b925082613dd057613dcf613c9c565b5b828204905092915050565b7f4974204469646e74207265616368206d696e207469636b657473207965742e00600082015250565b6000613e11601f83612940565b9150613e1c82613ddb565b602082019050919050565b60006020820190508181036000830152613e4081613e04565b9050919050565b7f4c6f747465727920616c72656164792066696e616c697a65642e000000000000600082015250565b6000613e7d601a83612940565b9150613e8882613e47565b602082019050919050565b60006020820190508181036000830152613eac81613e70565b9050919050565b6000604082019050613ec86000830185612716565b8181036020830152613eda8184613073565b90509392505050565b600081549050613ef2816133d9565b9050919050565b60008190508160005260206000209050919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302613f707fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82613f33565b613f7a8683613f33565b95508019841693508086168417925050509392505050565b6000819050919050565b6000613fb7613fb2613fad8461270c565b613f92565b61270c565b9050919050565b6000819050919050565b613fd183613f9c565b613fe5613fdd82613fbe565b848454613f40565b825550505050565b600090565b613ffa613fed565b614005818484613fc8565b505050565b5b818110156140295761401e600082613ff2565b60018101905061400b565b5050565b601f82111561406e5761403f81613ef9565b61404884613f23565b81016020851015614057578190505b61406b61406385613f23565b83018261400a565b50505b505050565b600082821c905092915050565b600061409160001984600802614073565b1980831691505092915050565b60006140aa8383614080565b9150826002028217905092915050565b8181036140c85750506141a0565b6140d182613ee3565b67ffffffffffffffff8111156140ea576140e9612796565b5b6140f482546133d9565b6140ff82828561402d565b6000601f83116001811461412e576000841561411c578287015490505b614126858261409e565b865550614199565b601f19841661413c87613f0e565b965061414786613ef9565b60005b8281101561416f5784890154825560018201915060018501945060208101905061414a565b8683101561418c5784890154614188601f891682614080565b8355505b6001600288020188555050505b5050505050505b565b6141ab81612fbf565b82525050565b6141ba816132bd565b82525050565b6141c981612ce5565b82525050565b600060a0820190506141e460008301886141a2565b6141f160208301876141b1565b6141fe60408301866141c0565b61420b6060830185613357565b6142186080830184613357565b9695505050505050565b60008151905061423181612754565b92915050565b60006020828403121561424d5761424c61274a565b5b600061425b84828501614222565b91505092915050565b60006040820190506142796000830185612716565b6142866020830184613357565b939250505056fea2646970667358221220272cf61b0b920e39fcbfa4366e686087f47d8a210bde70d9ab69171ca7e0bed464736f6c63430008140033",
  "devdoc": {
    "errors": {
      "OwnableInvalidOwner(address)": [
        {
          "details": "The owner is not a valid owner account. (eg. `address(0)`)"
        }
      ],
      "OwnableUnauthorizedAccount(address)": [
        {
          "details": "The caller account is not authorized to perform an operation."
        }
      ],
      "ReentrancyGuardReentrantCall()": [
        {
          "details": "Unauthorized reentrant call."
        }
      ]
    },
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 361,
        "contract": "contracts/Lottery.sol:Lottery",
        "label": "_status",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 181,
        "contract": "contracts/Lottery.sol:Lottery",
        "label": "_owner",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 1406,
        "contract": "contracts/Lottery.sol:Lottery",
        "label": "s_requests",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_struct(RequestStatus)1401_storage)"
      },
      {
        "astId": 1409,
        "contract": "contracts/Lottery.sol:Lottery",
        "label": "COORDINATOR",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(VRFCoordinatorV2Interface)114"
      },
      {
        "astId": 1411,
        "contract": "contracts/Lottery.sol:Lottery",
        "label": "s_subscriptionId",
        "offset": 20,
        "slot": "3",
        "type": "t_uint64"
      },
      {
        "astId": 1414,
        "contract": "contracts/Lottery.sol:Lottery",
        "label": "requestIds",
        "offset": 0,
        "slot": "4",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 1416,
        "contract": "contracts/Lottery.sol:Lottery",
        "label": "lastRequestId",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 1418,
        "contract": "contracts/Lottery.sol:Lottery",
        "label": "keyHash",
        "offset": 0,
        "slot": "6",
        "type": "t_bytes32"
      },
      {
        "astId": 1420,
        "contract": "contracts/Lottery.sol:Lottery",
        "label": "callbackGasLimit",
        "offset": 0,
        "slot": "7",
        "type": "t_uint32"
      },
      {
        "astId": 1422,
        "contract": "contracts/Lottery.sol:Lottery",
        "label": "requestConfirmations",
        "offset": 4,
        "slot": "7",
        "type": "t_uint16"
      },
      {
        "astId": 478,
        "contract": "contracts/Lottery.sol:Lottery",
        "label": "ticketOwners",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_struct(User)444_storage))"
      },
      {
        "astId": 484,
        "contract": "contracts/Lottery.sol:Lottery",
        "label": "tickets",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_address))"
      },
      {
        "astId": 489,
        "contract": "contracts/Lottery.sol:Lottery",
        "label": "lottery",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_uint256,t_struct(LotteryStruct)471_storage)"
      },
      {
        "astId": 491,
        "contract": "contracts/Lottery.sol:Lottery",
        "label": "lotteryId",
        "offset": 0,
        "slot": "11",
        "type": "t_uint256"
      },
      {
        "astId": 493,
        "contract": "contracts/Lottery.sol:Lottery",
        "label": "fee",
        "offset": 0,
        "slot": "12",
        "type": "t_uint256"
      },
      {
        "astId": 495,
        "contract": "contracts/Lottery.sol:Lottery",
        "label": "configFinishTime",
        "offset": 0,
        "slot": "13",
        "type": "t_uint256"
      },
      {
        "astId": 497,
        "contract": "contracts/Lottery.sol:Lottery",
        "label": "configTimeToClaim",
        "offset": 0,
        "slot": "14",
        "type": "t_uint256"
      },
      {
        "astId": 499,
        "contract": "contracts/Lottery.sol:Lottery",
        "label": "minTicket",
        "offset": 0,
        "slot": "15",
        "type": "t_uint32"
      },
      {
        "astId": 501,
        "contract": "contracts/Lottery.sol:Lottery",
        "label": "ticketPrice",
        "offset": 0,
        "slot": "16",
        "type": "t_uint256"
      },
      {
        "astId": 503,
        "contract": "contracts/Lottery.sol:Lottery",
        "label": "lotteryName",
        "offset": 0,
        "slot": "17",
        "type": "t_string_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(Ticket)435_storage)dyn_storage": {
        "base": "t_struct(Ticket)435_storage",
        "encoding": "dynamic_array",
        "label": "struct Lottery.Ticket[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(VRFCoordinatorV2Interface)114": {
        "encoding": "inplace",
        "label": "contract VRFCoordinatorV2Interface",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_struct(User)444_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct Lottery.User)",
        "numberOfBytes": "32",
        "value": "t_struct(User)444_storage"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_struct(User)444_storage))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => struct Lottery.User))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_struct(User)444_storage)"
      },
      "t_mapping(t_uint256,t_mapping(t_uint256,t_address))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(uint256 => address))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_address)"
      },
      "t_mapping(t_uint256,t_struct(LotteryStruct)471_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct Lottery.LotteryStruct)",
        "numberOfBytes": "32",
        "value": "t_struct(LotteryStruct)471_storage"
      },
      "t_mapping(t_uint256,t_struct(RequestStatus)1401_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct VRFV2Consumer.RequestStatus)",
        "numberOfBytes": "32",
        "value": "t_struct(RequestStatus)1401_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(LotteryStruct)471_storage": {
        "encoding": "inplace",
        "label": "struct Lottery.LotteryStruct",
        "members": [
          {
            "astId": 446,
            "contract": "contracts/Lottery.sol:Lottery",
            "label": "name",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 448,
            "contract": "contracts/Lottery.sol:Lottery",
            "label": "ticketPrice",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 450,
            "contract": "contracts/Lottery.sol:Lottery",
            "label": "ticketsCount",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 452,
            "contract": "contracts/Lottery.sol:Lottery",
            "label": "startedTime",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 454,
            "contract": "contracts/Lottery.sol:Lottery",
            "label": "balance",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 456,
            "contract": "contracts/Lottery.sol:Lottery",
            "label": "finalized",
            "offset": 0,
            "slot": "5",
            "type": "t_bool"
          },
          {
            "astId": 458,
            "contract": "contracts/Lottery.sol:Lottery",
            "label": "indexChainLink",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 460,
            "contract": "contracts/Lottery.sol:Lottery",
            "label": "winner",
            "offset": 0,
            "slot": "7",
            "type": "t_address"
          },
          {
            "astId": 462,
            "contract": "contracts/Lottery.sol:Lottery",
            "label": "claimed",
            "offset": 20,
            "slot": "7",
            "type": "t_bool"
          },
          {
            "astId": 464,
            "contract": "contracts/Lottery.sol:Lottery",
            "label": "minTicket",
            "offset": 21,
            "slot": "7",
            "type": "t_uint32"
          },
          {
            "astId": 466,
            "contract": "contracts/Lottery.sol:Lottery",
            "label": "finishTrigger",
            "offset": 25,
            "slot": "7",
            "type": "t_bool"
          },
          {
            "astId": 468,
            "contract": "contracts/Lottery.sol:Lottery",
            "label": "timeToFinish",
            "offset": 0,
            "slot": "8",
            "type": "t_uint256"
          },
          {
            "astId": 470,
            "contract": "contracts/Lottery.sol:Lottery",
            "label": "timeToClaim",
            "offset": 0,
            "slot": "9",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "320"
      },
      "t_struct(RequestStatus)1401_storage": {
        "encoding": "inplace",
        "label": "struct VRFV2Consumer.RequestStatus",
        "members": [
          {
            "astId": 1395,
            "contract": "contracts/Lottery.sol:Lottery",
            "label": "fulfilled",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 1397,
            "contract": "contracts/Lottery.sol:Lottery",
            "label": "exists",
            "offset": 1,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 1400,
            "contract": "contracts/Lottery.sol:Lottery",
            "label": "randomWords",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_uint256)dyn_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Ticket)435_storage": {
        "encoding": "inplace",
        "label": "struct Lottery.Ticket",
        "members": [
          {
            "astId": 432,
            "contract": "contracts/Lottery.sol:Lottery",
            "label": "ticketId",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 434,
            "contract": "contracts/Lottery.sol:Lottery",
            "label": "timestamp",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(User)444_storage": {
        "encoding": "inplace",
        "label": "struct Lottery.User",
        "members": [
          {
            "astId": 437,
            "contract": "contracts/Lottery.sol:Lottery",
            "label": "hasTicket",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 439,
            "contract": "contracts/Lottery.sol:Lottery",
            "label": "claimed",
            "offset": 1,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 443,
            "contract": "contracts/Lottery.sol:Lottery",
            "label": "tickets",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_struct(Ticket)435_storage)dyn_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      }
    }
  }
}