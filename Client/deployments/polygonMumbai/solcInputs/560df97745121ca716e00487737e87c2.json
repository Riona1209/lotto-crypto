{
  "language": "Solidity",
  "sources": {
    "@chainlink/contracts/src/v0.8/automation/AutomationBase.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ncontract AutomationBase {\n  error OnlySimulatedBackend();\n\n  /**\n   * @notice method that allows it to be simulated via eth_call by checking that\n   * the sender is the zero address.\n   */\n  function preventExecution() internal view {\n    if (tx.origin != address(0)) {\n      revert OnlySimulatedBackend();\n    }\n  }\n\n  /**\n   * @notice modifier that allows it to be simulated via eth_call by checking\n   * that the sender is the zero address.\n   */\n  modifier cannotExecute() {\n    preventExecution();\n    _;\n  }\n}\n"
    },
    "@chainlink/contracts/src/v0.8/automation/AutomationCompatible.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"./AutomationBase.sol\";\nimport \"./interfaces/AutomationCompatibleInterface.sol\";\n\nabstract contract AutomationCompatible is AutomationBase, AutomationCompatibleInterface {}\n"
    },
    "@chainlink/contracts/src/v0.8/automation/interfaces/AutomationCompatibleInterface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface AutomationCompatibleInterface {\n  /**\n   * @notice method that is simulated by the keepers to see if any work actually\n   * needs to be performed. This method does does not actually need to be\n   * executable, and since it is only ever simulated it can consume lots of gas.\n   * @dev To ensure that it is never called, you may want to add the\n   * cannotExecute modifier from KeeperBase to your implementation of this\n   * method.\n   * @param checkData specified in the upkeep registration so it is always the\n   * same for a registered upkeep. This can easily be broken down into specific\n   * arguments using `abi.decode`, so multiple upkeeps can be registered on the\n   * same contract and easily differentiated by the contract.\n   * @return upkeepNeeded boolean to indicate whether the keeper should call\n   * performUpkeep or not.\n   * @return performData bytes that the keeper should call performUpkeep with, if\n   * upkeep is needed. If you would like to encode data to decode later, try\n   * `abi.encode`.\n   */\n  function checkUpkeep(bytes calldata checkData) external returns (bool upkeepNeeded, bytes memory performData);\n\n  /**\n   * @notice method that is actually executed by the keepers, via the registry.\n   * The data returned by the checkUpkeep simulation will be passed into\n   * this method to actually be executed.\n   * @dev The input to this method should not be trusted, and the caller of the\n   * method should not even be restricted to any single registry. Anyone should\n   * be able call it, and the input should be validated, there is no guarantee\n   * that the data passed in is the performData returned from checkUpkeep. This\n   * could happen due to malicious keepers, racing keepers, or simply a state\n   * change while the performUpkeep transaction is waiting for confirmation.\n   * Always validate the data passed in.\n   * @param performData is the data which was passed back from the checkData\n   * simulation. If it is encoded, it can easily be decoded into other types by\n   * calling `abi.decode`. This data should not be trusted, and should be\n   * validated against the contract's current state.\n   */\n  function performUpkeep(bytes calldata performData) external;\n}\n"
    },
    "@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface VRFCoordinatorV2Interface {\n  /**\n   * @notice Get configuration relevant for making requests\n   * @return minimumRequestConfirmations global min for request confirmations\n   * @return maxGasLimit global max for request gas limit\n   * @return s_provingKeyHashes list of registered key hashes\n   */\n  function getRequestConfig() external view returns (uint16, uint32, bytes32[] memory);\n\n  /**\n   * @notice Request a set of random words.\n   * @param keyHash - Corresponds to a particular oracle job which uses\n   * that key for generating the VRF proof. Different keyHash's have different gas price\n   * ceilings, so you can select a specific one to bound your maximum per request cost.\n   * @param subId  - The ID of the VRF subscription. Must be funded\n   * with the minimum subscription balance required for the selected keyHash.\n   * @param minimumRequestConfirmations - How many blocks you'd like the\n   * oracle to wait before responding to the request. See SECURITY CONSIDERATIONS\n   * for why you may want to request more. The acceptable range is\n   * [minimumRequestBlockConfirmations, 200].\n   * @param callbackGasLimit - How much gas you'd like to receive in your\n   * fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords\n   * may be slightly less than this amount because of gas used calling the function\n   * (argument decoding etc.), so you may need to request slightly more than you expect\n   * to have inside fulfillRandomWords. The acceptable range is\n   * [0, maxGasLimit]\n   * @param numWords - The number of uint256 random values you'd like to receive\n   * in your fulfillRandomWords callback. Note these numbers are expanded in a\n   * secure way by the VRFCoordinator from a single random value supplied by the oracle.\n   * @return requestId - A unique identifier of the request. Can be used to match\n   * a request to a response in fulfillRandomWords.\n   */\n  function requestRandomWords(\n    bytes32 keyHash,\n    uint64 subId,\n    uint16 minimumRequestConfirmations,\n    uint32 callbackGasLimit,\n    uint32 numWords\n  ) external returns (uint256 requestId);\n\n  /**\n   * @notice Create a VRF subscription.\n   * @return subId - A unique subscription id.\n   * @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\n   * @dev Note to fund the subscription, use transferAndCall. For example\n   * @dev  LINKTOKEN.transferAndCall(\n   * @dev    address(COORDINATOR),\n   * @dev    amount,\n   * @dev    abi.encode(subId));\n   */\n  function createSubscription() external returns (uint64 subId);\n\n  /**\n   * @notice Get a VRF subscription.\n   * @param subId - ID of the subscription\n   * @return balance - LINK balance of the subscription in juels.\n   * @return reqCount - number of requests for this subscription, determines fee tier.\n   * @return owner - owner of the subscription.\n   * @return consumers - list of consumer address which are able to use this subscription.\n   */\n  function getSubscription(\n    uint64 subId\n  ) external view returns (uint96 balance, uint64 reqCount, address owner, address[] memory consumers);\n\n  /**\n   * @notice Request subscription owner transfer.\n   * @param subId - ID of the subscription\n   * @param newOwner - proposed new owner of the subscription\n   */\n  function requestSubscriptionOwnerTransfer(uint64 subId, address newOwner) external;\n\n  /**\n   * @notice Request subscription owner transfer.\n   * @param subId - ID of the subscription\n   * @dev will revert if original owner of subId has\n   * not requested that msg.sender become the new owner.\n   */\n  function acceptSubscriptionOwnerTransfer(uint64 subId) external;\n\n  /**\n   * @notice Add a consumer to a VRF subscription.\n   * @param subId - ID of the subscription\n   * @param consumer - New consumer which can use the subscription\n   */\n  function addConsumer(uint64 subId, address consumer) external;\n\n  /**\n   * @notice Remove a consumer from a VRF subscription.\n   * @param subId - ID of the subscription\n   * @param consumer - Consumer to remove from the subscription\n   */\n  function removeConsumer(uint64 subId, address consumer) external;\n\n  /**\n   * @notice Cancel a subscription\n   * @param subId - ID of the subscription\n   * @param to - Where to send the remaining LINK to\n   */\n  function cancelSubscription(uint64 subId, address to) external;\n\n  /*\n   * @notice Check to see if there exists a request commitment consumers\n   * for all consumers and keyhashes for a given sub.\n   * @param subId - ID of the subscription\n   * @return true if there exists at least one unfulfilled request for the subscription, false\n   * otherwise.\n   */\n  function pendingRequestExists(uint64 subId) external view returns (bool);\n}\n"
    },
    "@chainlink/contracts/src/v0.8/vrf/VRFConsumerBaseV2.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\n/** ****************************************************************************\n * @notice Interface for contracts using VRF randomness\n * *****************************************************************************\n * @dev PURPOSE\n *\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\n * @dev making his output up to suit himself. Reggie provides Vera a public key\n * @dev to which he knows the secret key. Each time Vera provides a seed to\n * @dev Reggie, he gives back a value which is computed completely\n * @dev deterministically from the seed and the secret key.\n *\n * @dev Reggie provides a proof by which Vera can verify that the output was\n * @dev correctly computed once Reggie tells it to her, but without that proof,\n * @dev the output is indistinguishable to her from a uniform random sample\n * @dev from the output space.\n *\n * @dev The purpose of this contract is to make it easy for unrelated contracts\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\n * @dev simple access to a verifiable source of randomness. It ensures 2 things:\n * @dev 1. The fulfillment came from the VRFCoordinator\n * @dev 2. The consumer contract implements fulfillRandomWords.\n * *****************************************************************************\n * @dev USAGE\n *\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\n * @dev initialize VRFConsumerBase's attributes in their constructor as\n * @dev shown:\n *\n * @dev   contract VRFConsumer {\n * @dev     constructor(<other arguments>, address _vrfCoordinator, address _link)\n * @dev       VRFConsumerBase(_vrfCoordinator) public {\n * @dev         <initialization with other arguments goes here>\n * @dev       }\n * @dev   }\n *\n * @dev The oracle will have given you an ID for the VRF keypair they have\n * @dev committed to (let's call it keyHash). Create subscription, fund it\n * @dev and your consumer contract as a consumer of it (see VRFCoordinatorInterface\n * @dev subscription management functions).\n * @dev Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,\n * @dev callbackGasLimit, numWords),\n * @dev see (VRFCoordinatorInterface for a description of the arguments).\n *\n * @dev Once the VRFCoordinator has received and validated the oracle's response\n * @dev to your request, it will call your contract's fulfillRandomWords method.\n *\n * @dev The randomness argument to fulfillRandomWords is a set of random words\n * @dev generated from your requestId and the blockHash of the request.\n *\n * @dev If your contract could have concurrent requests open, you can use the\n * @dev requestId returned from requestRandomWords to track which response is associated\n * @dev with which randomness request.\n * @dev See \"SECURITY CONSIDERATIONS\" for principles to keep in mind,\n * @dev if your contract could have multiple requests in flight simultaneously.\n *\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\n * @dev differ.\n *\n * *****************************************************************************\n * @dev SECURITY CONSIDERATIONS\n *\n * @dev A method with the ability to call your fulfillRandomness method directly\n * @dev could spoof a VRF response with any random value, so it's critical that\n * @dev it cannot be directly called by anything other than this base contract\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\n *\n * @dev For your users to trust that your contract's random behavior is free\n * @dev from malicious interference, it's best if you can write it so that all\n * @dev behaviors implied by a VRF response are executed *during* your\n * @dev fulfillRandomness method. If your contract must store the response (or\n * @dev anything derived from it) and use it later, you must ensure that any\n * @dev user-significant behavior which depends on that stored value cannot be\n * @dev manipulated by a subsequent VRF request.\n *\n * @dev Similarly, both miners and the VRF oracle itself have some influence\n * @dev over the order in which VRF responses appear on the blockchain, so if\n * @dev your contract could have multiple VRF requests in flight simultaneously,\n * @dev you must ensure that the order in which the VRF responses arrive cannot\n * @dev be used to manipulate your contract's user-significant behavior.\n *\n * @dev Since the block hash of the block which contains the requestRandomness\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\n * @dev miner could, in principle, fork the blockchain to evict the block\n * @dev containing the request, forcing the request to be included in a\n * @dev different block with a different hash, and therefore a different input\n * @dev to the VRF. However, such an attack would incur a substantial economic\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\n * @dev until it calls responds to a request. It is for this reason that\n * @dev that you can signal to an oracle you'd like them to wait longer before\n * @dev responding to the request (however this is not enforced in the contract\n * @dev and so remains effective only in the case of unmodified oracle software).\n */\nabstract contract VRFConsumerBaseV2 {\n  error OnlyCoordinatorCanFulfill(address have, address want);\n  address private immutable vrfCoordinator;\n\n  /**\n   * @param _vrfCoordinator address of VRFCoordinator contract\n   */\n  constructor(address _vrfCoordinator) {\n    vrfCoordinator = _vrfCoordinator;\n  }\n\n  /**\n   * @notice fulfillRandomness handles the VRF response. Your contract must\n   * @notice implement it. See \"SECURITY CONSIDERATIONS\" above for important\n   * @notice principles to keep in mind when implementing your fulfillRandomness\n   * @notice method.\n   *\n   * @dev VRFConsumerBaseV2 expects its subcontracts to have a method with this\n   * @dev signature, and will call it once it has verified the proof\n   * @dev associated with the randomness. (It is triggered via a call to\n   * @dev rawFulfillRandomness, below.)\n   *\n   * @param requestId The Id initially returned by requestRandomness\n   * @param randomWords the VRF output expanded to the requested number of words\n   */\n  function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords) internal virtual;\n\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\n  // the origin of the call\n  function rawFulfillRandomWords(uint256 requestId, uint256[] memory randomWords) external {\n    if (msg.sender != vrfCoordinator) {\n      revert OnlyCoordinatorCanFulfill(msg.sender, vrfCoordinator);\n    }\n    fulfillRandomWords(requestId, randomWords);\n  }\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\n\npragma solidity ^0.8.20;\n\nimport {Context} from \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * The initial owner is set to the address provided by the deployer. This can\n * later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    /**\n     * @dev The caller account is not authorized to perform an operation.\n     */\n    error OwnableUnauthorizedAccount(address account);\n\n    /**\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\n     */\n    error OwnableInvalidOwner(address owner);\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\n     */\n    constructor(address initialOwner) {\n        if (initialOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(initialOwner);\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        if (owner() != _msgSender()) {\n            revert OwnableUnauthorizedAccount(_msgSender());\n        }\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        if (newOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/ReentrancyGuard.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant NOT_ENTERED = 1;\n    uint256 private constant ENTERED = 2;\n\n    uint256 private _status;\n\n    /**\n     * @dev Unauthorized reentrant call.\n     */\n    error ReentrancyGuardReentrantCall();\n\n    constructor() {\n        _status = NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _nonReentrantBefore();\n        _;\n        _nonReentrantAfter();\n    }\n\n    function _nonReentrantBefore() private {\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\n        if (_status == ENTERED) {\n            revert ReentrancyGuardReentrantCall();\n        }\n\n        // Any calls to nonReentrant after this point will fail\n        _status = ENTERED;\n    }\n\n    function _nonReentrantAfter() private {\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = NOT_ENTERED;\n    }\n\n    /**\n     * @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\n     * `nonReentrant` function in the call stack.\n     */\n    function _reentrancyGuardEntered() internal view returns (bool) {\n        return _status == ENTERED;\n    }\n}\n"
    },
    "contracts/Lottery.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.20;\r\n\r\nimport \"@chainlink/contracts/src/v0.8/automation/AutomationCompatible.sol\";\r\nimport \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\";\r\n\r\nimport \"./VRFV2Consumer.sol\";\r\n\r\ncontract Lottery is\r\n    ReentrancyGuard,\r\n    VRFV2Consumer,\r\n    AutomationCompatibleInterface\r\n{\r\n\r\n    struct Ticket {\r\n        uint256 ticketId;\r\n        uint256 timestamp;\r\n    }\r\n\r\n    struct User {\r\n        bool hasTicket;\r\n        bool claimed;\r\n        Ticket[] tickets;\r\n    }\r\n\r\n    struct LotteryStruct {\r\n        string name;\r\n        uint256 ticketPrice;\r\n        uint256 ticketsCount;\r\n        uint256 startedTime;\r\n        uint256 balance;\r\n        bool finalized;\r\n        uint256 indexChainLink;\r\n        address winner;\r\n        bool claimed;\r\n        uint32 minTicket;\r\n        bool finishTrigger;\r\n        uint256 timeToFinish;\r\n        uint256 timeToClaim;\r\n    }\r\n\r\n    mapping(uint256 => mapping(address => User)) ticketOwners;\r\n    mapping(uint256 => mapping(uint256 => address)) tickets;\r\n    mapping(uint256 => LotteryStruct) lottery;\r\n\r\n    uint256 public lotteryId;\r\n    uint256 public fee;\r\n    uint256 public configFinishTime;\r\n    uint256 public configTimeToClaim;\r\n    uint32 public minTicket;\r\n    uint256 public ticketPrice;\r\n    string public lotteryName;\r\n\r\n    event TicketBought(\r\n        address indexed buyer,\r\n        uint256 price,\r\n        uint256 ticketNumber\r\n    );\r\n    event MinTicketsReached(\r\n        uint256 ticketNumber,\r\n        uint32 minTickets,\r\n        uint256 balance,\r\n        uint256 finishTime\r\n    );\r\n    event LotteryFinalized(\r\n        address owner,\r\n        uint256 totalValue,\r\n        uint256 ticketAmount\r\n    );\r\n    event ClaimedPrize(\r\n        address indexed winner,\r\n        uint256 lotteryIndex,\r\n        uint256 totalPrize,\r\n        uint256 fee\r\n    );\r\n    event ClaimedExpiredPrize(\r\n        address indexed winner,\r\n        address owner,\r\n        uint256 lotteryIndex,\r\n        uint256 totalPrize\r\n    );\r\n    event ChangedProperties(\r\n        address indexed owner,\r\n        string name,\r\n        uint256 ticketPrize,\r\n        uint256 fee,\r\n        uint32 minTicket,\r\n        uint256 configFinishTime,\r\n        uint256 configTimeToClaim\r\n    );\r\n\r\n    constructor(\r\n        address owner,\r\n        uint64 _subscriptionId,\r\n        address _cordinatorAddress,\r\n        bytes32 _keyHash,\r\n        string memory _name,\r\n        uint256 _ticketPrice,\r\n        uint32 _minTicket,\r\n        uint256 _fee,\r\n        uint256 _configFinishTime,\r\n        uint256 _configTimeToClaim\r\n    ) VRFV2Consumer(owner, _subscriptionId, _cordinatorAddress, _keyHash) {\r\n        // Start with LotteryId=1\r\n        lotteryId++;\r\n        uint256 currentLottery = lotteryId;\r\n\r\n        lottery[currentLottery].name = _name;\r\n        lottery[currentLottery].ticketPrice = _ticketPrice;\r\n        lottery[currentLottery].minTicket = _minTicket;\r\n        lottery[currentLottery].startedTime = block.timestamp;\r\n\r\n        fee = _fee;\r\n        lotteryName = _name;\r\n        configFinishTime = _configFinishTime;\r\n        configTimeToClaim = _configTimeToClaim;\r\n        ticketPrice = _ticketPrice;\r\n        minTicket = _minTicket;\r\n    }\r\n\r\n    function buyTicket() external payable nonReentrant {\r\n        uint256 currentLottery = lotteryId;\r\n        require(\r\n            !lottery[currentLottery].finalized,\r\n            \"This lottery has already finalized, wait for results!\"\r\n        );\r\n        require(\r\n            lottery[currentLottery].ticketPrice == msg.value,\r\n            \"You need to pay the exactly ticket price.\"\r\n        );\r\n\r\n        uint256 currentLotteryPosition = lottery[currentLottery]\r\n            .ticketsCount;\r\n        lottery[currentLottery].ticketsCount ++;\r\n\r\n        ticketOwners[currentLottery][msg.sender].hasTicket = true;\r\n        ticketOwners[currentLottery][msg.sender].claimed = false;\r\n        ticketOwners[currentLottery][msg.sender].tickets.push(\r\n            Ticket(currentLotteryPosition, block.timestamp)\r\n        );\r\n\r\n        tickets[currentLottery][currentLotteryPosition] = msg.sender;\r\n        lottery[currentLottery].balance += msg.value;\r\n\r\n        uint256 nextLotteryPosition = lottery[currentLottery]\r\n            .ticketsCount;\r\n\r\n        if (\r\n            !lottery[currentLottery].finishTrigger &&\r\n            nextLotteryPosition >= lottery[currentLottery].minTicket\r\n        ) {\r\n            lottery[currentLottery].finishTrigger = true;\r\n            lottery[currentLottery].timeToFinish =\r\n                block.timestamp +\r\n                configFinishTime;\r\n\r\n            emit MinTicketsReached(\r\n                nextLotteryPosition,\r\n                lottery[currentLottery].minTicket,\r\n                lottery[currentLottery].balance,\r\n                lottery[currentLottery].timeToFinish\r\n            );\r\n        }\r\n\r\n        emit TicketBought(msg.sender, msg.value, currentLottery);\r\n    }\r\n\r\n    function finalizeLottery() private {\r\n        uint256 currentLottery = lotteryId;\r\n        uint256 currentLotteryPosition = lottery[currentLottery]\r\n            .ticketsCount;\r\n\r\n        require(\r\n            lottery[currentLottery].minTicket <= currentLotteryPosition,\r\n            \"It Didnt reach min tickets yet.\"\r\n        );\r\n\r\n        require(\r\n            !lottery[currentLottery].finalized,\r\n            \"Lottery already finalized.\"\r\n        );\r\n\r\n        lottery[currentLottery].finalized = true;\r\n        lottery[currentLottery].indexChainLink = requestRandomWords(1);\r\n        emit LotteryFinalized(\r\n            msg.sender,\r\n            lottery[currentLottery].balance,\r\n            lottery[currentLottery].ticketsCount\r\n        );\r\n    }\r\n\r\n    function fulfillRandomWords(\r\n        uint256 _requestId,\r\n        uint256[] memory _randomWords\r\n    ) internal override {\r\n        super.fulfillRandomWords(_requestId, _randomWords);\r\n        uint256 currentLottery = lotteryId;\r\n        uint256 currentLotteryPosition = lottery[currentLottery]\r\n            .ticketsCount;\r\n        if (_requestId == lottery[currentLottery].indexChainLink) {\r\n            lottery[currentLottery].winner = tickets[currentLottery][\r\n                _randomWords[0] % currentLotteryPosition\r\n            ];\r\n            lottery[currentLottery].timeToClaim =\r\n                block.timestamp +\r\n                configTimeToClaim;\r\n            require(resetLottery(), \"Lottery needs to be reseted\");\r\n        }\r\n    }\r\n\r\n    function claim(uint256 lotteryIndex) external nonReentrant {\r\n        require(\r\n            !lottery[lotteryIndex].claimed,\r\n            \"The winner already claimed its prize.\"\r\n        );\r\n        require(\r\n            lottery[lotteryIndex].finalized,\r\n            \"This lottery isn't finalized yet.\"\r\n        );\r\n        require(\r\n            lottery[lotteryIndex].winner != address(0),\r\n            \"This lottery didn't get a winner yet.\"\r\n        );\r\n        require(\r\n            lottery[lotteryIndex].winner == msg.sender,\r\n            \"You're not the winner.\"\r\n        );\r\n        require(\r\n            ticketOwners[lotteryIndex][msg.sender].hasTicket,\r\n            \"You dont have any ticket to claim here.\"\r\n        );\r\n        require(\r\n            !ticketOwners[lotteryIndex][msg.sender].claimed,\r\n            \"You have alread claimed your prize.\"\r\n        );\r\n        lottery[lotteryIndex].claimed = true;\r\n        ticketOwners[lotteryIndex][msg.sender].hasTicket = false;\r\n        ticketOwners[lotteryIndex][msg.sender].claimed = true;\r\n\r\n        uint256 _feeAmount = _calcFee(lottery[lotteryIndex].balance);\r\n        uint256 prize = lottery[lotteryIndex].balance - _feeAmount;\r\n\r\n        payable(owner()).transfer(_feeAmount);\r\n        payable(msg.sender).transfer(prize);\r\n        emit ClaimedPrize(msg.sender, lotteryIndex, prize, _feeAmount);\r\n    }\r\n\r\n    function claimExpiredLottery(uint256 lotteryIndex) external onlyOwner {\r\n        require(\r\n            !lottery[lotteryIndex].claimed,\r\n            \"The winner already claimed its prize.\"\r\n        );\r\n        require(\r\n            lottery[lotteryIndex].finalized,\r\n            \"This lottery isn't finalized yet.\"\r\n        );\r\n        require(\r\n            lottery[lotteryIndex].winner != address(0),\r\n            \"This lottery didn't get a winner yet.\"\r\n        );\r\n        require(\r\n            lottery[lotteryIndex].timeToClaim < block.timestamp,\r\n            \"You can't claim before timeToClaim get expired.\"\r\n        );\r\n\r\n        lottery[lotteryIndex].claimed = true;\r\n\r\n        payable(owner()).transfer(lottery[lotteryIndex].balance);\r\n        emit ClaimedExpiredPrize(lottery[lotteryIndex].winner, msg.sender, lotteryIndex, lottery[lotteryIndex].balance);\r\n    }\r\n\r\n    function resetLottery() private returns (bool) {\r\n        lotteryId++;\r\n        uint256 nextLottery = lotteryId;\r\n\r\n        lottery[nextLottery].name = lotteryName;\r\n        lottery[nextLottery].ticketPrice = ticketPrice;\r\n        lottery[nextLottery].minTicket = minTicket;\r\n        lottery[nextLottery].startedTime = block.timestamp;\r\n\r\n        return true;\r\n    }\r\n\r\n    function _calcFee(uint256 amount) private view returns (uint256) {\r\n        return (amount * fee) / 100;\r\n    }\r\n\r\n    function setProperties(\r\n        string memory _name,\r\n        uint256 _ticketPrice,\r\n        uint32 _minTicket,\r\n        uint256 _configFinishTime,\r\n        uint256 _configTimeToClaim,\r\n        uint256 _fee\r\n    ) external onlyOwner {\r\n        require(_fee <= 30, \"Fee can't be better than 30%\");\r\n\r\n        fee = _fee;\r\n        configFinishTime = _configFinishTime;\r\n        configTimeToClaim = _configTimeToClaim;\r\n        ticketPrice = _ticketPrice;\r\n        minTicket = _minTicket;\r\n        emit ChangedProperties(\r\n            msg.sender,\r\n            _name,\r\n            _ticketPrice,\r\n            _fee,\r\n            _minTicket,\r\n            _configFinishTime,\r\n            _configTimeToClaim\r\n        );\r\n    }\r\n\r\n    function getLotteryStatus(\r\n        uint256 _lotteryId\r\n    ) public view returns (LotteryStruct memory _lottery) {\r\n        return lottery[_lotteryId];\r\n    }\r\n\r\n    function getUserStatus(\r\n        uint256 _lotteryId,\r\n        address _user\r\n    ) public view returns (User memory _returnedUser) {\r\n        return ticketOwners[_lotteryId][_user];\r\n    }\r\n\r\n    function checkUpkeep(\r\n        bytes calldata /* checkData */\r\n    )\r\n        external\r\n        view\r\n        override\r\n        returns (bool upkeepNeeded, bytes memory /* performData */)\r\n    {\r\n        uint256 currentLottery = lotteryId;\r\n        upkeepNeeded = (lottery[currentLottery].finishTrigger &&\r\n            block.timestamp > lottery[currentLottery].timeToFinish);\r\n    }\r\n\r\n    function performUpkeep(bytes calldata /* performData */) external override {\r\n        uint256 currentLottery = lotteryId;\r\n\r\n        require(\r\n            (lottery[currentLottery].finishTrigger &&\r\n                block.timestamp > lottery[currentLottery].timeToFinish),\r\n            \"Not read yet\"\r\n        );\r\n        finalizeLottery();\r\n    }\r\n}\r\n"
    },
    "contracts/VRFV2Consumer.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.20;\r\n\r\nimport \"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\";\r\nimport \"@chainlink/contracts/src/v0.8/vrf/VRFConsumerBaseV2.sol\";\r\n\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\n\r\ncontract VRFV2Consumer is VRFConsumerBaseV2, Ownable {\r\n    event RequestSent(uint256 requestId, uint32 numWords);\r\n    event RequestFulfilled(uint256 requestId, uint256[] randomWords);\r\n\r\n    struct RequestStatus {\r\n        bool fulfilled;\r\n        bool exists;\r\n        uint256[] randomWords;\r\n    }\r\n\r\n    mapping(uint256 => RequestStatus) public s_requests; /* requestId --> requestStatus */\r\n    VRFCoordinatorV2Interface COORDINATOR;\r\n\r\n    // Your subscription ID.\r\n    uint64 s_subscriptionId;\r\n\r\n    // past requests Id.\r\n    uint256[] public requestIds;\r\n    uint256 public lastRequestId;\r\n\r\n    // The gas lane to use, which specifies the maximum gas price to bump to.\r\n    // For a list of available gas lanes on each network,\r\n    // see https://docs.chain.link/docs/vrf/v2/subscription/supported-networks/#configurations\r\n    bytes32 keyHash;\r\n\r\n    // Depends on the number of requested values that you want sent to the\r\n    // fulfillRandomWords() function. Storing each word costs about 20,000 gas,\r\n    // so 100,000 is a safe default for this example contract. Test and adjust\r\n    // this limit based on the network that you select, the size of the request,\r\n    // and the processing of the callback request in the fulfillRandomWords()\r\n    // function.\r\n    uint32 callbackGasLimit;\r\n\r\n    // The default is 3, but you can set this higher.\r\n    uint16 requestConfirmations;\r\n\r\n    constructor(address owner, uint64 subscriptionId, address cordinatorAddress, bytes32 _keyHash)\r\n        Ownable(owner) VRFConsumerBaseV2(cordinatorAddress)\r\n    {\r\n        COORDINATOR = VRFCoordinatorV2Interface(cordinatorAddress);\r\n        s_subscriptionId = subscriptionId;\r\n        keyHash = _keyHash;\r\n        callbackGasLimit = 500000;\r\n        requestConfirmations = 3;\r\n    }\r\n\r\n    // Assumes the subscription is funded sufficiently.\r\n    function requestRandomWords(uint32 _numWords) internal returns (uint256 requestId) {\r\n        // Will revert if subscription is not set and funded.\r\n        requestId = COORDINATOR.requestRandomWords(\r\n            keyHash,\r\n            s_subscriptionId,\r\n            requestConfirmations,\r\n            callbackGasLimit,\r\n            _numWords\r\n        );\r\n        s_requests[requestId] = RequestStatus({randomWords: new uint256[](0), exists: true, fulfilled: false});\r\n        requestIds.push(requestId);\r\n        lastRequestId = requestId;\r\n        emit RequestSent(requestId, _numWords);\r\n        return requestId;\r\n    }\r\n\r\n    function fulfillRandomWords(uint256 _requestId, uint256[] memory _randomWords) internal virtual override {\r\n        require(s_requests[_requestId].exists, 'request not found');\r\n        s_requests[_requestId].fulfilled = true;\r\n        s_requests[_requestId].randomWords = _randomWords;\r\n        emit RequestFulfilled(_requestId, _randomWords);\r\n    }\r\n\r\n    function getRequestStatus(uint256 _requestId) external view returns (bool fulfilled, uint256[] memory randomWords) {\r\n        require(s_requests[_requestId].exists, 'request not found');\r\n        RequestStatus memory request = s_requests[_requestId];\r\n        return (request.fulfilled, request.randomWords);\r\n    }\r\n\r\n    function setKeyHashValue(bytes32 _keyHash) external onlyOwner {\r\n        keyHash = _keyHash;\r\n    }\r\n\r\n    function setCallBackGasLimit(uint32 _callBackGasLimit) external onlyOwner {\r\n        callbackGasLimit = _callBackGasLimit;\r\n    }\r\n\r\n    function setRequestConfirmations(uint16 _requestConfirmations) external onlyOwner {\r\n        requestConfirmations = _requestConfirmations;\r\n    }\r\n\r\n    function setSubscriptionId(uint64 _s_subscriptionId) external onlyOwner {\r\n        s_subscriptionId = _s_subscriptionId;\r\n    }\r\n}\r\n"
    }
  },
  "settings": {
    "evmVersion": "paris",
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}